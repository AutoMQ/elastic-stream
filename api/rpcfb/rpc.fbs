namespace header;

enum ErrorCode : uint16 {
    None = 0,
    Unknown = 1,
    Invalid_Request = 2
}

enum ClientRole : uint8 {
    CLIENT_ROLE_UNKNOWN = 0,
    CLIENT_ROLE_PM = 1,
    CLIENT_ROLE_DATA_NODE = 2,
}

// The heartbeat is used to keep the connection alive.
table HeartbeatRequest {
    // The unique id of the client.
    client_id: string (id: 0);
    // The role of the client. The client role is used to determine the type of the client.
    client_role: ClientRole (id: 1);
    // Optional, the node information of the data node. Empty if the client is a SDK client.
    data_node: DataNode (id: 2);
}

table HeartbeatResponse {
    client_id: string (id: 0);
    client_role: ClientRole (id: 1);
    data_node: DataNode (id: 2);
}

// The append request is used to append records to the data node.
table AppendRequest {
    // The timeout to await a response in milliseconds.
    timeout_ms: uint32 (id: 0);
    // A batch of append requests.
    append_requests: [AppendInfo] (id: 1);
}

table AppendInfo {
    // The id of the stream to append records.
    stream_id: uint64 (id: 0);
    // The index of the request in the batch.
    request_index: uint32 (id: 1);
    // The payload length of this record batch to append
    batch_length: uint32 (id: 2);
}

table AppendResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // A batch of append responses.
    append_responses: [AppendResult] (id: 1);
}

table AppendResult {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The index of the request that this response is for.
    request_index: uint32 (id: 1);
    // The offset of the first record in the record batch.
    base_offset: uint64 (id: 2);
    // The timestamp returned by the data node server after appending the records.
    stream_append_time_ms: uint64 (id: 3);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 4);
    // The error message, or omitted if there was no error.
    error_message: string (id: 5);
}

// The fetch request is used to fetch records from the data node.
// This frame supports fetching data from multiple streams in one frame,
// and the response could be split into multiple frames then returned in a streaming way.
table FetchRequest {
    // The maximum time in milliseconds to wait for the response.
    max_wait_ms: uint32 (id: 0);
    // The minimum bytes to accumulate before returning a response.
    min_bytes: uint32 (id: 1);
    // A batch of fetch requests to fetch data from different streams.
    fetch_requests: [FetchInfo] (id: 2);
}

table FetchInfo {
    // A specfic stream to fetch data from.
    stream_id: uint64 (id: 0);
    // The index of the request in the batch.
    request_index: uint32 (id: 1);
    // The offset to fetch from.
    fetch_offset: uint64 (id: 2);
    // The maximum number of bytes to fetch.
    batch_max_bytes: uint32 (id: 3);
}

table FetchResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // A batch of fetch responses.
    fetch_responses: [FetchResult] (id: 1);
}

table FetchResult {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The index of the request that this response is for.
    request_index: uint32 (id: 1);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 2);
    // The error message, or omitted if there was no error.
    error_message: string (id: 3);
    // The data length of the returned batch is used to decode the data from the payload.
    batch_length: uint32 (id: 4);
}

// Used to fetch the ranges from a specific data node or a specific stream list.
// Regard this table as a union type.
// Alway set one of the fields.
table RangeOwner {
    data_node: DataNode (id: 0);
    // The stream id to list the ranges.
    stream_id: uint64 (id: 1);
}

table DataNode {
    // The node id of the data node.
    node_id: uint32 (id: 0);

    // The advertise address of the data node, for client traffic from outside.
    // The schema of the address is `host:port`, while host supports both domain name and IPv4/IPv6 address.
    advertise_addr: string (id: 1);
}

// The list streams request is used to list the ranges of a batch of streams.
// Or it could list the ranges of all the streams in a specific data node.
table ListRangesRequest {
    timeout_ms: uint32 (id: 0);
    // The range owner could be a data node or a list of streams.
    // Note: a union type adds two fields, so the id of the field occupies 2 ids.
    range_owners: [RangeOwner] (id: 1);
}

table ListRangesResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of list ranges request
    list_responses: [ListRangesResult] (id: 1);
}

table ListRangesResult {
    // The owner that the returned ranges belong to.
    // Maybe a data node or a stream id.
    range_owner: RangeOwner (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
    // The list of ranges.
    ranges: [Range] (id: 3);
}

table Range {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The index of the range in the stream.
    range_index: uint32 (id: 1);
    // The start offset of the range.
    start_offset: uint64 (id: 2);
    // The end offset of the range.
    // Omited if the range is open.
    end_offset: uint64 (id: 3);
    // The next writable offset for incoming records of the range.
    // It's a snapshot of the next offset of the range, and it may be changed after the response is sent.
    next_offset: uint64 (id: 4);
    // The set of all nodes that host this range.
    replica_nodes: [ReplicaNode] (id: 5);
}

table ReplicaNode {
    data_node: DataNode (id: 0);
    is_primary: bool (id: 1);
}

table SealRangesRequest {
    timeout_ms: uint32 (id: 0);
    // The ranges to seal.
    ranges: [RangeId] (id: 1);
}

table RangeId {
    stream_id: uint64 (id: 0);
    range_index: uint32 (id: 1);
}

table SealRangesResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of seal ranges request
    seal_responses: [SealRangesResult] (id: 1);
}

table SealRangesResult {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
    // The array of ranges, returned by the seal ranges request.
    // Both the PM and the data node will handle the seal ranges request.
    // Only the sealed ranges will be returned from the data node, while the sealed ranges and the newly writable ranges will be returned from the PM.
    ranges: [Range] (id: 3);
}

// The sync ranges request is used to sync newly writable ranges to accelerate the availability of a newly created writable range.
// Or, it could be used to assign a new replics of a range to a new data node.
table SyncRangesRequest {
    timeout_ms: uint32 (id: 0);
    // The ranges to sync.
    stream_ranges: [StreamRanges] (id: 1);
}

// Contains the ranges of a specific stream.
table StreamRanges {
    stream_id: uint64 (id: 0);
    ranges: [Range] (id: 1);
}

table SyncRangesResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of sync ranges request
    sync_responses: [SyncRangesResult] (id: 1);
}

table SyncRangesResult {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
    // The array of ranges, returned by the sync ranges request.
    ranges: [Range] (id: 3);
}

// The describe ranges request is used to describe the ranges of a batch of streams.
// Usually, the client will use this frame to get the newly end offset of the stream after the write operation.
table DescribeRangesRequest {
    timeout_ms: uint32 (id: 0);
    // The ranges to describe.
    ranges: [RangeId] (id: 1);
}

table DescribeRangesResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of describe ranges request
    describe_responses: [DescribeRangeResult] (id: 1);
}

table DescribeRangeResult {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
    // The array of ranges, returned by the describe ranges request.
    ranges: Range (id: 3);
}

table Stream {
    // The id of the stream
    // Omitted if the stream is not created.
    stream_id: uint64 (id: 0);
    // The number of replica of the stream.
    replica_nums: uint8 (id: 1);
    // The time to live of records in the stream in milliseconds.
    retention_period_ms: uint32 (id: 2);
}

// The create streams request is used to create a batch of streams.
// This frame with batch ability is very useful for importing metadata from other systems.
table CreateStreamsRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: uint32 (id: 0);
    // A batch of streams to create.
    stremas: [Stream] (id: 1);
}

table CreateStreamsResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of create streams request
    create_responses: [CreateStreamResult] (id: 1);
}

table CreateStreamResult {
    // The created stream
    stream: Stream (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
}

// The delete streams request is used to delete a batch of streams to PM or data node.
// The PM will delete the stream metadata as well as the range info, while the data node only marks the stream as deleted to reject the new write requests timely.
table DeleteStreamsRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: uint32 (id: 0);
    // The ids of the streams to delete.
    streams: [Stream] (id: 1);
}

table DeleteStreamsResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of delete streams request
    delete_responses: [DeleteStreamResult] (id: 1);
}

table DeleteStreamResult {
    // The deleted stream, or omitted if the stream is not deleted.
    deleted_stream: Stream (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
}

table UpdateStreamsRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: uint32 (id: 0);
    // The streams to update.
    streams: [Stream] (id: 1);
}

table UpdateStreamsResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of update streams request
    update_responses: [UpdateStreamResult] (id: 1);
}

table UpdateStreamResult {
    // The updated stream
    stream: Stream (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
}

table DescribeStreamsRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: uint32 (id: 0);
    // The ids of the streams to describe.
    stream_ids: [uint64] (id: 1);
}

table DescribeStreamsResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of describe streams request
    describe_responses: [DescribeStreamResult] (id: 1);
}

table DescribeStreamResult {
    // The stream, returned by the describe streams request.
    stream: Stream (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
}

// The trim streams request is used to trim  a batch of streams to PM.
// The data node stores the records in the stream in a log structure,
// and the records are appended to the end of the log.
// Consider the length of disk is limited, the data node will delete the records to recycling the disk space.
// Once the deletion occurs, some ranges should be trimmed to avoid the clients to read the deleted records.

// The data node will send the TRIM_STREAMS frame to the PM to trim the stream with a trim offset.
// The PM will delete the ranges whose end offset is less than the trim offset
// and shrink the ranges whose start offset is less than the trim offset.

table TrimeStreamsRequest {
    // The timeout in milliseconds to wait for the response.
    timeout_ms: uint32 (id: 0);
    // The ids of the streams to trim.
    trimmed_streams: [TrimmedStream] (id: 1);
}

table TrimmedStream {
    // The id of the stream
    stream_id: uint64 (id: 0);
    // The current minimum offset of the stream.
    // All the records before this offset have be deleted.
    trim_offset: uint64 (id: 1);
}

table TrimStreamsResponse {
    // The time in milliseconds to throttle the client, due to a quota violation or the server is too busy.
    throttle_time_ms: uint32 (id: 0);
    // The responses of trim streams request
    trim_responses: [TrimStreamResult] (id: 1);
}

table TrimStreamResult {
    // The trimmed stream
    trimmed_stream: Stream (id: 0);
    // The error code, or 0 if there was no error.
    error_code: ErrorCode (id: 1);
    // The error message, or omitted if there was no error.
    error_message: string (id: 2);
    // The smallest range of the stream after a trim operation.
    range: Range (id: 3);
}

table ReportMetricsRequest {
    data_node: DataNode (id: 0);
    // Number of bytes written to the disk per second.
    disk_in_rate: uint64 (id: 1);
    // Number of bytes read from the disk per second.
    disk_out_rate: uint64 (id: 2);
    // Disk free space size, measured in bytes.
    disk_free_space: uint64 (id: 3);
    // Size of the data that has not yet been indexed, measured in bytes.
    disk_unindexed_data_size: uint64 (id: 4);
    // Used memory size, measured in bytes.
    memory_used: uint64 (id: 5);
    // Number of tasks completed per second in uring.
    uring_task_rate: uint16 (id: 6);
    // Number of inflight tasks in uring.
    uring_inflight_task_cnt: uint16 (id: 7);
    // Number of pending tasks in uring.
    uring_pending_task_cnt: uint32 (id: 8);
    // Average latency of completed tasks over the past minute in uring, measured in ms.
    uring_task_avg_latency: uint16 (id: 9);
    // Number of append requests per second.
    network_append_rate: uint16 (id: 10);
    // Number of fetch requests per second.
    network_fetch_rate: uint16 (id: 11);
    // Number of failed append requests per second.
    network_failed_append_rate: uint16 (id: 12);
    // Number of failed fetch requests per second.
    network_failed_fetch_rate: uint16 (id: 13);
    // Average latency of append requests over the past minute, measured in ms.
    network_append_avg_latency: uint16 (id: 14);
    // Average latency of fetch requests over the past minute, measured in ms.
    network_fetch_avg_latency: uint16 (id: 15);
    // Number of replicas that need to be copied from other Data Node.
    range_missing_replica_cnt: uint16 (id: 16);
    // Number of active(recently read or write) ranges in the past minute.
    range_active_cnt: uint16 (id: 17);
}

table ReportMetricsResponse {
    data_node: DataNode (id: 0);
}

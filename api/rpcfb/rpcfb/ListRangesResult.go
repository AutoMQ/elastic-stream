// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListRangesResultT struct {
	RangeCriteria *RangeCriteriaT `json:"range_criteria"`
	ErrorCode ErrorCode `json:"error_code"`
	ErrorMessage string `json:"error_message"`
	Ranges []*RangeT `json:"ranges"`
}

func (t *ListRangesResultT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeCriteriaOffset := t.RangeCriteria.Pack(builder)
	errorMessageOffset := flatbuffers.UOffsetT(0)
	if t.ErrorMessage != "" {
		errorMessageOffset = builder.CreateString(t.ErrorMessage)
	}
	rangesOffset := flatbuffers.UOffsetT(0)
	if t.Ranges != nil {
		rangesLength := len(t.Ranges)
		rangesOffsets := make([]flatbuffers.UOffsetT, rangesLength)
		for j := 0; j < rangesLength; j++ {
			rangesOffsets[j] = t.Ranges[j].Pack(builder)
		}
		ListRangesResultStartRangesVector(builder, rangesLength)
		for j := rangesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rangesOffsets[j])
		}
		rangesOffset = builder.EndVector(rangesLength)
	}
	ListRangesResultStart(builder)
	ListRangesResultAddRangeCriteria(builder, rangeCriteriaOffset)
	ListRangesResultAddErrorCode(builder, t.ErrorCode)
	ListRangesResultAddErrorMessage(builder, errorMessageOffset)
	ListRangesResultAddRanges(builder, rangesOffset)
	return ListRangesResultEnd(builder)
}

func (rcv *ListRangesResult) UnPackTo(t *ListRangesResultT) {
	t.RangeCriteria = rcv.RangeCriteria(nil).UnPack()
	t.ErrorCode = rcv.ErrorCode()
	t.ErrorMessage = string(rcv.ErrorMessage())
	rangesLength := rcv.RangesLength()
	t.Ranges = make([]*RangeT, rangesLength)
	for j := 0; j < rangesLength; j++ {
		x := Range{}
		rcv.Ranges(&x, j)
		t.Ranges[j] = x.UnPack()
	}
}

func (rcv *ListRangesResult) UnPack() *ListRangesResultT {
	if rcv == nil { return nil }
	t := &ListRangesResultT{}
	rcv.UnPackTo(t)
	return t
}

type ListRangesResult struct {
	_tab flatbuffers.Table
}

func GetRootAsListRangesResult(buf []byte, offset flatbuffers.UOffsetT) *ListRangesResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListRangesResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsListRangesResult(buf []byte, offset flatbuffers.UOffsetT) *ListRangesResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListRangesResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ListRangesResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListRangesResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListRangesResult) RangeCriteria(obj *RangeCriteria) *RangeCriteria {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeCriteria)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListRangesResult) ErrorCode() ErrorCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ErrorCode(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ListRangesResult) MutateErrorCode(n ErrorCode) bool {
	return rcv._tab.MutateInt16Slot(6, int16(n))
}

func (rcv *ListRangesResult) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ListRangesResult) Ranges(obj *Range, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ListRangesResult) RangesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ListRangesResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ListRangesResultAddRangeCriteria(builder *flatbuffers.Builder, rangeCriteria flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(rangeCriteria), 0)
}
func ListRangesResultAddErrorCode(builder *flatbuffers.Builder, errorCode ErrorCode) {
	builder.PrependInt16Slot(1, int16(errorCode), 0)
}
func ListRangesResultAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(errorMessage), 0)
}
func ListRangesResultAddRanges(builder *flatbuffers.Builder, ranges flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(ranges), 0)
}
func ListRangesResultStartRangesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListRangesResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

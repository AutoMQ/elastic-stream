// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppendResponseT struct {
	ThrottleTimeMs int32 `json:"throttle_time_ms"`
	AppendResponses []*AppendResultT `json:"append_responses"`
	Status *StatusT `json:"status"`
}

func (t *AppendResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	appendResponsesOffset := flatbuffers.UOffsetT(0)
	if t.AppendResponses != nil {
		appendResponsesLength := len(t.AppendResponses)
		appendResponsesOffsets := make([]flatbuffers.UOffsetT, appendResponsesLength)
		for j := 0; j < appendResponsesLength; j++ {
			appendResponsesOffsets[j] = t.AppendResponses[j].Pack(builder)
		}
		AppendResponseStartAppendResponsesVector(builder, appendResponsesLength)
		for j := appendResponsesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(appendResponsesOffsets[j])
		}
		appendResponsesOffset = builder.EndVector(appendResponsesLength)
	}
	statusOffset := t.Status.Pack(builder)
	AppendResponseStart(builder)
	AppendResponseAddThrottleTimeMs(builder, t.ThrottleTimeMs)
	AppendResponseAddAppendResponses(builder, appendResponsesOffset)
	AppendResponseAddStatus(builder, statusOffset)
	return AppendResponseEnd(builder)
}

func (rcv *AppendResponse) UnPackTo(t *AppendResponseT) {
	t.ThrottleTimeMs = rcv.ThrottleTimeMs()
	appendResponsesLength := rcv.AppendResponsesLength()
	t.AppendResponses = make([]*AppendResultT, appendResponsesLength)
	for j := 0; j < appendResponsesLength; j++ {
		x := AppendResult{}
		rcv.AppendResponses(&x, j)
		t.AppendResponses[j] = x.UnPack()
	}
	t.Status = rcv.Status(nil).UnPack()
}

func (rcv *AppendResponse) UnPack() *AppendResponseT {
	if rcv == nil { return nil }
	t := &AppendResponseT{}
	rcv.UnPackTo(t)
	return t
}

type AppendResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsAppendResponse(buf []byte, offset flatbuffers.UOffsetT) *AppendResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppendResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppendResponse(buf []byte, offset flatbuffers.UOffsetT) *AppendResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppendResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppendResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppendResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppendResponse) ThrottleTimeMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppendResponse) MutateThrottleTimeMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *AppendResponse) AppendResponses(obj *AppendResult, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *AppendResponse) AppendResponsesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *AppendResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func AppendResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func AppendResponseAddThrottleTimeMs(builder *flatbuffers.Builder, throttleTimeMs int32) {
	builder.PrependInt32Slot(0, throttleTimeMs, 0)
}
func AppendResponseAddAppendResponses(builder *flatbuffers.Builder, appendResponses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(appendResponses), 0)
}
func AppendResponseStartAppendResponsesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func AppendResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(status), 0)
}
func AppendResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeleteStreamResultT struct {
	DeletedStream *StreamT `json:"deleted_stream"`
	Status *StatusT `json:"status"`
}

func (t *DeleteStreamResultT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	deletedStreamOffset := t.DeletedStream.Pack(builder)
	statusOffset := t.Status.Pack(builder)
	DeleteStreamResultStart(builder)
	DeleteStreamResultAddDeletedStream(builder, deletedStreamOffset)
	DeleteStreamResultAddStatus(builder, statusOffset)
	return DeleteStreamResultEnd(builder)
}

func (rcv *DeleteStreamResult) UnPackTo(t *DeleteStreamResultT) {
	t.DeletedStream = rcv.DeletedStream(nil).UnPack()
	t.Status = rcv.Status(nil).UnPack()
}

func (rcv *DeleteStreamResult) UnPack() *DeleteStreamResultT {
	if rcv == nil { return nil }
	t := &DeleteStreamResultT{}
	rcv.UnPackTo(t)
	return t
}

type DeleteStreamResult struct {
	_tab flatbuffers.Table
}

func GetRootAsDeleteStreamResult(buf []byte, offset flatbuffers.UOffsetT) *DeleteStreamResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeleteStreamResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeleteStreamResult(buf []byte, offset flatbuffers.UOffsetT) *DeleteStreamResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeleteStreamResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeleteStreamResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeleteStreamResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeleteStreamResult) DeletedStream(obj *Stream) *Stream {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stream)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DeleteStreamResult) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func DeleteStreamResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DeleteStreamResultAddDeletedStream(builder *flatbuffers.Builder, deletedStream flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(deletedStream), 0)
}
func DeleteStreamResultAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(status), 0)
}
func DeleteStreamResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

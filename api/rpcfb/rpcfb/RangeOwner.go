// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RangeOwner struct {
	_tab flatbuffers.Table
}

func GetRootAsRangeOwner(buf []byte, offset flatbuffers.UOffsetT) *RangeOwner {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RangeOwner{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRangeOwner(buf []byte, offset flatbuffers.UOffsetT) *RangeOwner {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RangeOwner{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RangeOwner) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RangeOwner) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RangeOwner) DataNode(obj *DataNode) *DataNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DataNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RangeOwner) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeOwner) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func RangeOwnerStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func RangeOwnerAddDataNode(builder *flatbuffers.Builder, dataNode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dataNode), 0)
}
func RangeOwnerAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(1, streamId, 0)
}
func RangeOwnerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TrimeStreamsRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	TrimmedStreams []*TrimmedStreamT `json:"trimmed_streams"`
}

func (t *TrimeStreamsRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	trimmedStreamsOffset := flatbuffers.UOffsetT(0)
	if t.TrimmedStreams != nil {
		trimmedStreamsLength := len(t.TrimmedStreams)
		trimmedStreamsOffsets := make([]flatbuffers.UOffsetT, trimmedStreamsLength)
		for j := 0; j < trimmedStreamsLength; j++ {
			trimmedStreamsOffsets[j] = t.TrimmedStreams[j].Pack(builder)
		}
		TrimeStreamsRequestStartTrimmedStreamsVector(builder, trimmedStreamsLength)
		for j := trimmedStreamsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(trimmedStreamsOffsets[j])
		}
		trimmedStreamsOffset = builder.EndVector(trimmedStreamsLength)
	}
	TrimeStreamsRequestStart(builder)
	TrimeStreamsRequestAddTimeoutMs(builder, t.TimeoutMs)
	TrimeStreamsRequestAddTrimmedStreams(builder, trimmedStreamsOffset)
	return TrimeStreamsRequestEnd(builder)
}

func (rcv *TrimeStreamsRequest) UnPackTo(t *TrimeStreamsRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	trimmedStreamsLength := rcv.TrimmedStreamsLength()
	t.TrimmedStreams = make([]*TrimmedStreamT, trimmedStreamsLength)
	for j := 0; j < trimmedStreamsLength; j++ {
		x := TrimmedStream{}
		rcv.TrimmedStreams(&x, j)
		t.TrimmedStreams[j] = x.UnPack()
	}
}

func (rcv *TrimeStreamsRequest) UnPack() *TrimeStreamsRequestT {
	if rcv == nil { return nil }
	t := &TrimeStreamsRequestT{}
	rcv.UnPackTo(t)
	return t
}

type TrimeStreamsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsTrimeStreamsRequest(buf []byte, offset flatbuffers.UOffsetT) *TrimeStreamsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TrimeStreamsRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTrimeStreamsRequest(buf []byte, offset flatbuffers.UOffsetT) *TrimeStreamsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TrimeStreamsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TrimeStreamsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TrimeStreamsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TrimeStreamsRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TrimeStreamsRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TrimeStreamsRequest) TrimmedStreams(obj *TrimmedStream, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TrimeStreamsRequest) TrimmedStreamsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TrimeStreamsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TrimeStreamsRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func TrimeStreamsRequestAddTrimmedStreams(builder *flatbuffers.Builder, trimmedStreams flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(trimmedStreams), 0)
}
func TrimeStreamsRequestStartTrimmedStreamsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TrimeStreamsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

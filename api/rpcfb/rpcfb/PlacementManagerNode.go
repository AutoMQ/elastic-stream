// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlacementManagerNodeT struct {
	Name string `json:"name"`
	AdvertiseAddr string `json:"advertise_addr"`
	IsLeader bool `json:"is_leader"`
}

func (t *PlacementManagerNodeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	advertiseAddrOffset := flatbuffers.UOffsetT(0)
	if t.AdvertiseAddr != "" {
		advertiseAddrOffset = builder.CreateString(t.AdvertiseAddr)
	}
	PlacementManagerNodeStart(builder)
	PlacementManagerNodeAddName(builder, nameOffset)
	PlacementManagerNodeAddAdvertiseAddr(builder, advertiseAddrOffset)
	PlacementManagerNodeAddIsLeader(builder, t.IsLeader)
	return PlacementManagerNodeEnd(builder)
}

func (rcv *PlacementManagerNode) UnPackTo(t *PlacementManagerNodeT) {
	t.Name = string(rcv.Name())
	t.AdvertiseAddr = string(rcv.AdvertiseAddr())
	t.IsLeader = rcv.IsLeader()
}

func (rcv *PlacementManagerNode) UnPack() *PlacementManagerNodeT {
	if rcv == nil { return nil }
	t := &PlacementManagerNodeT{}
	rcv.UnPackTo(t)
	return t
}

type PlacementManagerNode struct {
	_tab flatbuffers.Table
}

func GetRootAsPlacementManagerNode(buf []byte, offset flatbuffers.UOffsetT) *PlacementManagerNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlacementManagerNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPlacementManagerNode(buf []byte, offset flatbuffers.UOffsetT) *PlacementManagerNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlacementManagerNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PlacementManagerNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlacementManagerNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlacementManagerNode) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlacementManagerNode) AdvertiseAddr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PlacementManagerNode) IsLeader() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *PlacementManagerNode) MutateIsLeader(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func PlacementManagerNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PlacementManagerNodeAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func PlacementManagerNodeAddAdvertiseAddr(builder *flatbuffers.Builder, advertiseAddr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(advertiseAddr), 0)
}
func PlacementManagerNodeAddIsLeader(builder *flatbuffers.Builder, isLeader bool) {
	builder.PrependBoolSlot(2, isLeader, false)
}
func PlacementManagerNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

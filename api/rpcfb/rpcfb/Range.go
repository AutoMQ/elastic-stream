// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type Range struct {
	_tab flatbuffers.Table
}

func GetRootAsRange(buf []byte, offset flatbuffers.UOffsetT) *Range {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Range{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRange(buf []byte, offset flatbuffers.UOffsetT) *Range {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Range{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Range) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Range) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Range) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Range) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Range) RangeIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Range) MutateRangeIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Range) StartOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Range) MutateStartOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Range) EndOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Range) MutateEndOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Range) NextOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *Range) MutateNextOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(12, n)
}

func (rcv *Range) ReplicaNodes(obj *ReplicaNode, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Range) ReplicaNodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func RangeStart(builder *flatbuffers.Builder) {
	builder.StartObject(6)
}
func RangeAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, 0)
}
func RangeAddRangeIndex(builder *flatbuffers.Builder, rangeIndex int32) {
	builder.PrependInt32Slot(1, rangeIndex, 0)
}
func RangeAddStartOffset(builder *flatbuffers.Builder, startOffset int64) {
	builder.PrependInt64Slot(2, startOffset, 0)
}
func RangeAddEndOffset(builder *flatbuffers.Builder, endOffset int64) {
	builder.PrependInt64Slot(3, endOffset, 0)
}
func RangeAddNextOffset(builder *flatbuffers.Builder, nextOffset int64) {
	builder.PrependInt64Slot(4, nextOffset, 0)
}
func RangeAddReplicaNodes(builder *flatbuffers.Builder, replicaNodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(5, flatbuffers.UOffsetT(replicaNodes), 0)
}
func RangeStartReplicaNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RangeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListRangesResponseT struct {
	ThrottleTimeMs int32 `json:"throttle_time_ms"`
	ListResponses []*ListRangesResultT `json:"list_responses"`
	ErrorCode ErrorCode `json:"error_code"`
	ErrorMessage string `json:"error_message"`
}

func (t *ListRangesResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	listResponsesOffset := flatbuffers.UOffsetT(0)
	if t.ListResponses != nil {
		listResponsesLength := len(t.ListResponses)
		listResponsesOffsets := make([]flatbuffers.UOffsetT, listResponsesLength)
		for j := 0; j < listResponsesLength; j++ {
			listResponsesOffsets[j] = t.ListResponses[j].Pack(builder)
		}
		ListRangesResponseStartListResponsesVector(builder, listResponsesLength)
		for j := listResponsesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(listResponsesOffsets[j])
		}
		listResponsesOffset = builder.EndVector(listResponsesLength)
	}
	errorMessageOffset := flatbuffers.UOffsetT(0)
	if t.ErrorMessage != "" {
		errorMessageOffset = builder.CreateString(t.ErrorMessage)
	}
	ListRangesResponseStart(builder)
	ListRangesResponseAddThrottleTimeMs(builder, t.ThrottleTimeMs)
	ListRangesResponseAddListResponses(builder, listResponsesOffset)
	ListRangesResponseAddErrorCode(builder, t.ErrorCode)
	ListRangesResponseAddErrorMessage(builder, errorMessageOffset)
	return ListRangesResponseEnd(builder)
}

func (rcv *ListRangesResponse) UnPackTo(t *ListRangesResponseT) {
	t.ThrottleTimeMs = rcv.ThrottleTimeMs()
	listResponsesLength := rcv.ListResponsesLength()
	t.ListResponses = make([]*ListRangesResultT, listResponsesLength)
	for j := 0; j < listResponsesLength; j++ {
		x := ListRangesResult{}
		rcv.ListResponses(&x, j)
		t.ListResponses[j] = x.UnPack()
	}
	t.ErrorCode = rcv.ErrorCode()
	t.ErrorMessage = string(rcv.ErrorMessage())
}

func (rcv *ListRangesResponse) UnPack() *ListRangesResponseT {
	if rcv == nil { return nil }
	t := &ListRangesResponseT{}
	rcv.UnPackTo(t)
	return t
}

type ListRangesResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsListRangesResponse(buf []byte, offset flatbuffers.UOffsetT) *ListRangesResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListRangesResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsListRangesResponse(buf []byte, offset flatbuffers.UOffsetT) *ListRangesResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListRangesResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ListRangesResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListRangesResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListRangesResponse) ThrottleTimeMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListRangesResponse) MutateThrottleTimeMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ListRangesResponse) ListResponses(obj *ListRangesResult, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ListRangesResponse) ListResponsesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ListRangesResponse) ErrorCode() ErrorCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return ErrorCode(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ListRangesResponse) MutateErrorCode(n ErrorCode) bool {
	return rcv._tab.MutateInt16Slot(8, int16(n))
}

func (rcv *ListRangesResponse) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func ListRangesResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ListRangesResponseAddThrottleTimeMs(builder *flatbuffers.Builder, throttleTimeMs int32) {
	builder.PrependInt32Slot(0, throttleTimeMs, 0)
}
func ListRangesResponseAddListResponses(builder *flatbuffers.Builder, listResponses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(listResponses), 0)
}
func ListRangesResponseStartListResponsesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListRangesResponseAddErrorCode(builder *flatbuffers.Builder, errorCode ErrorCode) {
	builder.PrependInt16Slot(2, int16(errorCode), 0)
}
func ListRangesResponseAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(errorMessage), 0)
}
func ListRangesResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

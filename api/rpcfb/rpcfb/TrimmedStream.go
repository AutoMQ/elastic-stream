// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TrimmedStreamT struct {
	StreamId int64 `json:"stream_id"`
	TrimOffset int64 `json:"trim_offset"`
}

func (t *TrimmedStreamT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	TrimmedStreamStart(builder)
	TrimmedStreamAddStreamId(builder, t.StreamId)
	TrimmedStreamAddTrimOffset(builder, t.TrimOffset)
	return TrimmedStreamEnd(builder)
}

func (rcv *TrimmedStream) UnPackTo(t *TrimmedStreamT) {
	t.StreamId = rcv.StreamId()
	t.TrimOffset = rcv.TrimOffset()
}

func (rcv *TrimmedStream) UnPack() *TrimmedStreamT {
	if rcv == nil { return nil }
	t := &TrimmedStreamT{}
	rcv.UnPackTo(t)
	return t
}

type TrimmedStream struct {
	_tab flatbuffers.Table
}

func GetRootAsTrimmedStream(buf []byte, offset flatbuffers.UOffsetT) *TrimmedStream {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TrimmedStream{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTrimmedStream(buf []byte, offset flatbuffers.UOffsetT) *TrimmedStream {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TrimmedStream{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TrimmedStream) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TrimmedStream) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TrimmedStream) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TrimmedStream) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *TrimmedStream) TrimOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TrimmedStream) MutateTrimOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func TrimmedStreamStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func TrimmedStreamAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, 0)
}
func TrimmedStreamAddTrimOffset(builder *flatbuffers.Builder, trimOffset int64) {
	builder.PrependInt64Slot(1, trimOffset, 0)
}
func TrimmedStreamEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

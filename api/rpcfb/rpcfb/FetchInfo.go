// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FetchInfo struct {
	_tab flatbuffers.Table
}

func GetRootAsFetchInfo(buf []byte, offset flatbuffers.UOffsetT) *FetchInfo {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FetchInfo{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFetchInfo(buf []byte, offset flatbuffers.UOffsetT) *FetchInfo {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FetchInfo{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FetchInfo) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FetchInfo) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FetchInfo) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchInfo) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *FetchInfo) RequestIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchInfo) MutateRequestIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *FetchInfo) FetchOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchInfo) MutateFetchOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *FetchInfo) BatchMaxBytes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchInfo) MutateBatchMaxBytes(n int32) bool {
	return rcv._tab.MutateInt32Slot(10, n)
}

func FetchInfoStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func FetchInfoAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, 0)
}
func FetchInfoAddRequestIndex(builder *flatbuffers.Builder, requestIndex int32) {
	builder.PrependInt32Slot(1, requestIndex, 0)
}
func FetchInfoAddFetchOffset(builder *flatbuffers.Builder, fetchOffset int64) {
	builder.PrependInt64Slot(2, fetchOffset, 0)
}
func FetchInfoAddBatchMaxBytes(builder *flatbuffers.Builder, batchMaxBytes int32) {
	builder.PrependInt32Slot(3, batchMaxBytes, 0)
}
func FetchInfoEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

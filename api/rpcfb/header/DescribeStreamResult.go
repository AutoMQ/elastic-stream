// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package header

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DescribeStreamResult struct {
	_tab flatbuffers.Table
}

func GetRootAsDescribeStreamResult(buf []byte, offset flatbuffers.UOffsetT) *DescribeStreamResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DescribeStreamResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDescribeStreamResult(buf []byte, offset flatbuffers.UOffsetT) *DescribeStreamResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DescribeStreamResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DescribeStreamResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DescribeStreamResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DescribeStreamResult) Stream(obj *Stream) *Stream {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Stream)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DescribeStreamResult) ErrorCode() ErrorCode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ErrorCode(rcv._tab.GetInt16(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *DescribeStreamResult) MutateErrorCode(n ErrorCode) bool {
	return rcv._tab.MutateInt16Slot(6, int16(n))
}

func (rcv *DescribeStreamResult) ErrorMessage() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DescribeStreamResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DescribeStreamResultAddStream(builder *flatbuffers.Builder, stream flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(stream), 0)
}
func DescribeStreamResultAddErrorCode(builder *flatbuffers.Builder, errorCode ErrorCode) {
	builder.PrependInt16Slot(1, int16(errorCode), 0)
}
func DescribeStreamResultAddErrorMessage(builder *flatbuffers.Builder, errorMessage flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(errorMessage), 0)
}
func DescribeStreamResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

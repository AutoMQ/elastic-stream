// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class RangeT {
  private long streamId;
  private long epoch;
  private int index;
  private long start;
  private long end;
  private com.automq.elasticstream.client.flatc.header.DataNodeT[] nodes;
  private byte replicaCount;
  private byte ackCount;

  public long getStreamId() { return streamId; }

  public void setStreamId(long streamId) { this.streamId = streamId; }

  public long getEpoch() { return epoch; }

  public void setEpoch(long epoch) { this.epoch = epoch; }

  public int getIndex() { return index; }

  public void setIndex(int index) { this.index = index; }

  public long getStart() { return start; }

  public void setStart(long start) { this.start = start; }

  public long getEnd() { return end; }

  public void setEnd(long end) { this.end = end; }

  public com.automq.elasticstream.client.flatc.header.DataNodeT[] getNodes() { return nodes; }

  public void setNodes(com.automq.elasticstream.client.flatc.header.DataNodeT[] nodes) { this.nodes = nodes; }

  public byte getReplicaCount() { return replicaCount; }

  public void setReplicaCount(byte replicaCount) { this.replicaCount = replicaCount; }

  public byte getAckCount() { return ackCount; }

  public void setAckCount(byte ackCount) { this.ackCount = ackCount; }


  public RangeT() {
    this.streamId = -1L;
    this.epoch = -1L;
    this.index = -1;
    this.start = -1L;
    this.end = -1L;
    this.nodes = null;
    this.replicaCount = -1;
    this.ackCount = -1;
  }
}


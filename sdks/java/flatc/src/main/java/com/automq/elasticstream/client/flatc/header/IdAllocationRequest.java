// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class IdAllocationRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static IdAllocationRequest getRootAsIdAllocationRequest(ByteBuffer _bb) { return getRootAsIdAllocationRequest(_bb, new IdAllocationRequest()); }
  public static IdAllocationRequest getRootAsIdAllocationRequest(ByteBuffer _bb, IdAllocationRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IdAllocationRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int timeoutMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public String host() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer hostAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer hostInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createIdAllocationRequest(FlatBufferBuilder builder,
      int timeoutMs,
      int hostOffset) {
    builder.startTable(2);
    IdAllocationRequest.addHost(builder, hostOffset);
    IdAllocationRequest.addTimeoutMs(builder, timeoutMs);
    return IdAllocationRequest.endIdAllocationRequest(builder);
  }

  public static void startIdAllocationRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimeoutMs(FlatBufferBuilder builder, int timeoutMs) { builder.addInt(0, timeoutMs, 0); }
  public static void addHost(FlatBufferBuilder builder, int hostOffset) { builder.addOffset(1, hostOffset, 0); }
  public static int endIdAllocationRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // host
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IdAllocationRequest get(int j) { return get(new IdAllocationRequest(), j); }
    public IdAllocationRequest get(IdAllocationRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public IdAllocationRequestT unpack() {
    IdAllocationRequestT _o = new IdAllocationRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(IdAllocationRequestT _o) {
    int _oTimeoutMs = timeoutMs();
    _o.setTimeoutMs(_oTimeoutMs);
    String _oHost = host();
    _o.setHost(_oHost);
  }
  public static int pack(FlatBufferBuilder builder, IdAllocationRequestT _o) {
    if (_o == null) return 0;
    int _host = _o.getHost() == null ? 0 : builder.createString(_o.getHost());
    return createIdAllocationRequest(
      builder,
      _o.getTimeoutMs(),
      _host);
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CreateStreamRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static CreateStreamRequest getRootAsCreateStreamRequest(ByteBuffer _bb) { return getRootAsCreateStreamRequest(_bb, new CreateStreamRequest()); }
  public static CreateStreamRequest getRootAsCreateStreamRequest(ByteBuffer _bb, CreateStreamRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CreateStreamRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int timeoutMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public com.automq.elasticstream.client.flatc.header.Stream stream() { return stream(new com.automq.elasticstream.client.flatc.header.Stream()); }
  public com.automq.elasticstream.client.flatc.header.Stream stream(com.automq.elasticstream.client.flatc.header.Stream obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createCreateStreamRequest(FlatBufferBuilder builder,
      int timeoutMs,
      int streamOffset) {
    builder.startTable(2);
    CreateStreamRequest.addStream(builder, streamOffset);
    CreateStreamRequest.addTimeoutMs(builder, timeoutMs);
    return CreateStreamRequest.endCreateStreamRequest(builder);
  }

  public static void startCreateStreamRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimeoutMs(FlatBufferBuilder builder, int timeoutMs) { builder.addInt(0, timeoutMs, 0); }
  public static void addStream(FlatBufferBuilder builder, int streamOffset) { builder.addOffset(1, streamOffset, 0); }
  public static int endCreateStreamRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 6);  // stream
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CreateStreamRequest get(int j) { return get(new CreateStreamRequest(), j); }
    public CreateStreamRequest get(CreateStreamRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CreateStreamRequestT unpack() {
    CreateStreamRequestT _o = new CreateStreamRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CreateStreamRequestT _o) {
    int _oTimeoutMs = timeoutMs();
    _o.setTimeoutMs(_oTimeoutMs);
    if (stream() != null) _o.setStream(stream().unpack());
    else _o.setStream(null);
  }
  public static int pack(FlatBufferBuilder builder, CreateStreamRequestT _o) {
    if (_o == null) return 0;
    int _stream = _o.getStream() == null ? 0 : com.automq.elasticstream.client.flatc.header.Stream.pack(builder, _o.getStream());
    return createCreateStreamRequest(
      builder,
      _o.getTimeoutMs(),
      _stream);
  }
}


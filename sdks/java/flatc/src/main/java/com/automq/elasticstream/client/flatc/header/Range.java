// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Range extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Range getRootAsRange(ByteBuffer _bb) { return getRootAsRange(_bb, new Range()); }
  public static Range getRootAsRange(ByteBuffer _bb, Range obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Range __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : -1L; }
  public long epoch() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : -1L; }
  public int index() { int o = __offset(8); return o != 0 ? bb.getInt(o + bb_pos) : -1; }
  public long start() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : -1L; }
  public long end() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : -1L; }
  public com.automq.elasticstream.client.flatc.header.DataNode nodes(int j) { return nodes(new com.automq.elasticstream.client.flatc.header.DataNode(), j); }
  public com.automq.elasticstream.client.flatc.header.DataNode nodes(com.automq.elasticstream.client.flatc.header.DataNode obj, int j) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int nodesLength() { int o = __offset(14); return o != 0 ? __vector_len(o) : 0; }
  public com.automq.elasticstream.client.flatc.header.DataNode.Vector nodesVector() { return nodesVector(new com.automq.elasticstream.client.flatc.header.DataNode.Vector()); }
  public com.automq.elasticstream.client.flatc.header.DataNode.Vector nodesVector(com.automq.elasticstream.client.flatc.header.DataNode.Vector obj) { int o = __offset(14); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public byte replicaCount() { int o = __offset(16); return o != 0 ? bb.get(o + bb_pos) : -1; }
  public byte ackCount() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : -1; }

  public static int createRange(FlatBufferBuilder builder,
      long streamId,
      long epoch,
      int index,
      long start,
      long end,
      int nodesOffset,
      byte replicaCount,
      byte ackCount) {
    builder.startTable(8);
    Range.addEnd(builder, end);
    Range.addStart(builder, start);
    Range.addEpoch(builder, epoch);
    Range.addStreamId(builder, streamId);
    Range.addNodes(builder, nodesOffset);
    Range.addIndex(builder, index);
    Range.addAckCount(builder, ackCount);
    Range.addReplicaCount(builder, replicaCount);
    return Range.endRange(builder);
  }

  public static void startRange(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, -1L); }
  public static void addEpoch(FlatBufferBuilder builder, long epoch) { builder.addLong(1, epoch, -1L); }
  public static void addIndex(FlatBufferBuilder builder, int index) { builder.addInt(2, index, -1); }
  public static void addStart(FlatBufferBuilder builder, long start) { builder.addLong(3, start, -1L); }
  public static void addEnd(FlatBufferBuilder builder, long end) { builder.addLong(4, end, -1L); }
  public static void addNodes(FlatBufferBuilder builder, int nodesOffset) { builder.addOffset(5, nodesOffset, 0); }
  public static int createNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addReplicaCount(FlatBufferBuilder builder, byte replicaCount) { builder.addByte(6, replicaCount, -1); }
  public static void addAckCount(FlatBufferBuilder builder, byte ackCount) { builder.addByte(7, ackCount, -1); }
  public static int endRange(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Range get(int j) { return get(new Range(), j); }
    public Range get(Range obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RangeT unpack() {
    RangeT _o = new RangeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RangeT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    long _oEpoch = epoch();
    _o.setEpoch(_oEpoch);
    int _oIndex = index();
    _o.setIndex(_oIndex);
    long _oStart = start();
    _o.setStart(_oStart);
    long _oEnd = end();
    _o.setEnd(_oEnd);
    com.automq.elasticstream.client.flatc.header.DataNodeT[] _oNodes = new com.automq.elasticstream.client.flatc.header.DataNodeT[nodesLength()];
    for (int _j = 0; _j < nodesLength(); ++_j) {_oNodes[_j] = (nodes(_j) != null ? nodes(_j).unpack() : null);}
    _o.setNodes(_oNodes);
    byte _oReplicaCount = replicaCount();
    _o.setReplicaCount(_oReplicaCount);
    byte _oAckCount = ackCount();
    _o.setAckCount(_oAckCount);
  }
  public static int pack(FlatBufferBuilder builder, RangeT _o) {
    if (_o == null) return 0;
    int _nodes = 0;
    if (_o.getNodes() != null) {
      int[] __nodes = new int[_o.getNodes().length];
      int _j = 0;
      for (com.automq.elasticstream.client.flatc.header.DataNodeT _e : _o.getNodes()) { __nodes[_j] = com.automq.elasticstream.client.flatc.header.DataNode.pack(builder, _e); _j++;}
      _nodes = createNodesVector(builder, __nodes);
    }
    return createRange(
      builder,
      _o.getStreamId(),
      _o.getEpoch(),
      _o.getIndex(),
      _o.getStart(),
      _o.getEnd(),
      _nodes,
      _o.getReplicaCount(),
      _o.getAckCount());
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PlacementManagerCluster extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static PlacementManagerCluster getRootAsPlacementManagerCluster(ByteBuffer _bb) { return getRootAsPlacementManagerCluster(_bb, new PlacementManagerCluster()); }
  public static PlacementManagerCluster getRootAsPlacementManagerCluster(ByteBuffer _bb, PlacementManagerCluster obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlacementManagerCluster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public com.automq.elasticstream.client.flatc.header.PlacementManagerNode nodes(int j) { return nodes(new com.automq.elasticstream.client.flatc.header.PlacementManagerNode(), j); }
  public com.automq.elasticstream.client.flatc.header.PlacementManagerNode nodes(com.automq.elasticstream.client.flatc.header.PlacementManagerNode obj, int j) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int nodesLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public com.automq.elasticstream.client.flatc.header.PlacementManagerNode.Vector nodesVector() { return nodesVector(new com.automq.elasticstream.client.flatc.header.PlacementManagerNode.Vector()); }
  public com.automq.elasticstream.client.flatc.header.PlacementManagerNode.Vector nodesVector(com.automq.elasticstream.client.flatc.header.PlacementManagerNode.Vector obj) { int o = __offset(4); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createPlacementManagerCluster(FlatBufferBuilder builder,
      int nodesOffset) {
    builder.startTable(1);
    PlacementManagerCluster.addNodes(builder, nodesOffset);
    return PlacementManagerCluster.endPlacementManagerCluster(builder);
  }

  public static void startPlacementManagerCluster(FlatBufferBuilder builder) { builder.startTable(1); }
  public static void addNodes(FlatBufferBuilder builder, int nodesOffset) { builder.addOffset(0, nodesOffset, 0); }
  public static int createNodesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startNodesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endPlacementManagerCluster(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // nodes
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlacementManagerCluster get(int j) { return get(new PlacementManagerCluster(), j); }
    public PlacementManagerCluster get(PlacementManagerCluster obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlacementManagerClusterT unpack() {
    PlacementManagerClusterT _o = new PlacementManagerClusterT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlacementManagerClusterT _o) {
    com.automq.elasticstream.client.flatc.header.PlacementManagerNodeT[] _oNodes = new com.automq.elasticstream.client.flatc.header.PlacementManagerNodeT[nodesLength()];
    for (int _j = 0; _j < nodesLength(); ++_j) {_oNodes[_j] = (nodes(_j) != null ? nodes(_j).unpack() : null);}
    _o.setNodes(_oNodes);
  }
  public static int pack(FlatBufferBuilder builder, PlacementManagerClusterT _o) {
    if (_o == null) return 0;
    int _nodes = 0;
    if (_o.getNodes() != null) {
      int[] __nodes = new int[_o.getNodes().length];
      int _j = 0;
      for (com.automq.elasticstream.client.flatc.header.PlacementManagerNodeT _e : _o.getNodes()) { __nodes[_j] = com.automq.elasticstream.client.flatc.header.PlacementManagerNode.pack(builder, _e); _j++;}
      _nodes = createNodesVector(builder, __nodes);
    }
    return createPlacementManagerCluster(
      builder,
      _nodes);
  }
}


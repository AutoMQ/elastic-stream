// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FetchEntry extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static FetchEntry getRootAsFetchEntry(ByteBuffer _bb) { return getRootAsFetchEntry(_bb, new FetchEntry()); }
  public static FetchEntry getRootAsFetchEntry(ByteBuffer _bb, FetchEntry obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FetchEntry __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public com.automq.elasticstream.client.flatc.header.Range range() { return range(new com.automq.elasticstream.client.flatc.header.Range()); }
  public com.automq.elasticstream.client.flatc.header.Range range(com.automq.elasticstream.client.flatc.header.Range obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long fetchOffset() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long endOffset() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int batchMaxBytes() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFetchEntry(FlatBufferBuilder builder,
      int rangeOffset,
      long fetchOffset,
      long endOffset,
      int batchMaxBytes) {
    builder.startTable(4);
    FetchEntry.addEndOffset(builder, endOffset);
    FetchEntry.addFetchOffset(builder, fetchOffset);
    FetchEntry.addBatchMaxBytes(builder, batchMaxBytes);
    FetchEntry.addRange(builder, rangeOffset);
    return FetchEntry.endFetchEntry(builder);
  }

  public static void startFetchEntry(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addRange(FlatBufferBuilder builder, int rangeOffset) { builder.addOffset(0, rangeOffset, 0); }
  public static void addFetchOffset(FlatBufferBuilder builder, long fetchOffset) { builder.addLong(1, fetchOffset, 0L); }
  public static void addEndOffset(FlatBufferBuilder builder, long endOffset) { builder.addLong(2, endOffset, 0L); }
  public static void addBatchMaxBytes(FlatBufferBuilder builder, int batchMaxBytes) { builder.addInt(3, batchMaxBytes, 0); }
  public static int endFetchEntry(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // range
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FetchEntry get(int j) { return get(new FetchEntry(), j); }
    public FetchEntry get(FetchEntry obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FetchEntryT unpack() {
    FetchEntryT _o = new FetchEntryT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FetchEntryT _o) {
    if (range() != null) _o.setRange(range().unpack());
    else _o.setRange(null);
    long _oFetchOffset = fetchOffset();
    _o.setFetchOffset(_oFetchOffset);
    long _oEndOffset = endOffset();
    _o.setEndOffset(_oEndOffset);
    int _oBatchMaxBytes = batchMaxBytes();
    _o.setBatchMaxBytes(_oBatchMaxBytes);
  }
  public static int pack(FlatBufferBuilder builder, FetchEntryT _o) {
    if (_o == null) return 0;
    int _range = _o.getRange() == null ? 0 : com.automq.elasticstream.client.flatc.header.Range.pack(builder, _o.getRange());
    return createFetchEntry(
      builder,
      _range,
      _o.getFetchOffset(),
      _o.getEndOffset(),
      _o.getBatchMaxBytes());
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class IdAllocationResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static IdAllocationResponse getRootAsIdAllocationResponse(ByteBuffer _bb) { return getRootAsIdAllocationResponse(_bb, new IdAllocationResponse()); }
  public static IdAllocationResponse getRootAsIdAllocationResponse(ByteBuffer _bb, IdAllocationResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IdAllocationResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public com.automq.elasticstream.client.flatc.header.Status status() { return status(new com.automq.elasticstream.client.flatc.header.Status()); }
  public com.automq.elasticstream.client.flatc.header.Status status(com.automq.elasticstream.client.flatc.header.Status obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int id() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createIdAllocationResponse(FlatBufferBuilder builder,
      int statusOffset,
      int id) {
    builder.startTable(2);
    IdAllocationResponse.addId(builder, id);
    IdAllocationResponse.addStatus(builder, statusOffset);
    return IdAllocationResponse.endIdAllocationResponse(builder);
  }

  public static void startIdAllocationResponse(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(0, statusOffset, 0); }
  public static void addId(FlatBufferBuilder builder, int id) { builder.addInt(1, id, 0); }
  public static int endIdAllocationResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    builder.required(o, 4);  // status
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IdAllocationResponse get(int j) { return get(new IdAllocationResponse(), j); }
    public IdAllocationResponse get(IdAllocationResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public IdAllocationResponseT unpack() {
    IdAllocationResponseT _o = new IdAllocationResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(IdAllocationResponseT _o) {
    if (status() != null) _o.setStatus(status().unpack());
    else _o.setStatus(null);
    int _oId = id();
    _o.setId(_oId);
  }
  public static int pack(FlatBufferBuilder builder, IdAllocationResponseT _o) {
    if (_o == null) return 0;
    int _status = _o.getStatus() == null ? 0 : com.automq.elasticstream.client.flatc.header.Status.pack(builder, _o.getStatus());
    return createIdAllocationResponse(
      builder,
      _status,
      _o.getId());
  }
}


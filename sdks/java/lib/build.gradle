/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.0.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // Apply the maven-publish plugin to allow publishing to Maven Central.
    id 'maven-publish'
    id 'com.google.protobuf' version '0.9.1'
}

java {
    withSourcesJar()
//    withJavadocJar()
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
    }
}

dependencies {
    implementation project(":flatc")
    implementation libs.guava
    // Use flatbuffers to decode and encode sbp messages
    implementation libs.flatbuffers.java
    implementation libs.commons.lang3
    implementation libs.netty.all
    // used for logging
    implementation libs.bundles.log4j

    // used for grpc
    implementation libs.grpc.protobuf
    implementation libs.grpc.stub
    runtimeOnly libs.grpc.netty.shaded
    // necessary for Java 9+
    compileOnly libs.tomcat.annotations.api
    testImplementation libs.grpc.testing

    testImplementation libs.junit.jupiter
    testImplementation libs.mockito.core

}

protobuf {
    protoc { artifact = libs.google.protoc.get() }
    plugins {
        grpc { artifact = libs.plugins.protoc.grpc.get() }
    }
    generateProtoTasks {
        all()*.plugins { grpc {} }
    }
}

test {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    // Filter out integration tests.
    filter {
        excludeTestsMatching "${project.group}.integration.*"
    }
}

tasks.register('integrationTest', Test) {
    dependsOn compileJava
    description = 'Runs integration tests.'
    group = 'verification'

    useJUnitPlatform()
    // Filter in integration tests.
    filter {
        includeTestsMatching "${project.group}.integration.*"
    }
    // Pass the system Properties to the forked JVM
    options {
        systemProperties(System.getProperties())
    }
}

tasks.named('sourcesJar') {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Inform IDEs like IntelliJ IDEA, Eclipse or NetBeans about the generated code.
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'client-java'

            from components.java
        }
    }
}
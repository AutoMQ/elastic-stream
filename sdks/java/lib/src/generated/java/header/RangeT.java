// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

public class RangeT {
  private long streamId;
  private int rangeIndex;
  private long startOffset;
  private long endOffset;
  private long nextOffset;
  private header.ReplicaNodeT[] replicaNodes;

  public long getStreamId() { return streamId; }

  public void setStreamId(long streamId) { this.streamId = streamId; }

  public int getRangeIndex() { return rangeIndex; }

  public void setRangeIndex(int rangeIndex) { this.rangeIndex = rangeIndex; }

  public long getStartOffset() { return startOffset; }

  public void setStartOffset(long startOffset) { this.startOffset = startOffset; }

  public long getEndOffset() { return endOffset; }

  public void setEndOffset(long endOffset) { this.endOffset = endOffset; }

  public long getNextOffset() { return nextOffset; }

  public void setNextOffset(long nextOffset) { this.nextOffset = nextOffset; }

  public header.ReplicaNodeT[] getReplicaNodes() { return replicaNodes; }

  public void setReplicaNodes(header.ReplicaNodeT[] replicaNodes) { this.replicaNodes = replicaNodes; }


  public RangeT() {
    this.streamId = 0L;
    this.rangeIndex = 0;
    this.startOffset = 0L;
    this.endOffset = 0L;
    this.nextOffset = 0L;
    this.replicaNodes = null;
  }
}


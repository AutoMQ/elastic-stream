// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SealRangesResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static SealRangesResponse getRootAsSealRangesResponse(ByteBuffer _bb) { return getRootAsSealRangesResponse(_bb, new SealRangesResponse()); }
  public static SealRangesResponse getRootAsSealRangesResponse(ByteBuffer _bb, SealRangesResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SealRangesResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int throttleTimeMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public header.SealRangesResult sealResponses(int j) { return sealResponses(new header.SealRangesResult(), j); }
  public header.SealRangesResult sealResponses(header.SealRangesResult obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int sealResponsesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public header.SealRangesResult.Vector sealResponsesVector() { return sealResponsesVector(new header.SealRangesResult.Vector()); }
  public header.SealRangesResult.Vector sealResponsesVector(header.SealRangesResult.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public short errorCode() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMessage() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMessageAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer errorMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createSealRangesResponse(FlatBufferBuilder builder,
      int throttleTimeMs,
      int sealResponsesOffset,
      short errorCode,
      int errorMessageOffset) {
    builder.startTable(4);
    SealRangesResponse.addErrorMessage(builder, errorMessageOffset);
    SealRangesResponse.addSealResponses(builder, sealResponsesOffset);
    SealRangesResponse.addThrottleTimeMs(builder, throttleTimeMs);
    SealRangesResponse.addErrorCode(builder, errorCode);
    return SealRangesResponse.endSealRangesResponse(builder);
  }

  public static void startSealRangesResponse(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addThrottleTimeMs(FlatBufferBuilder builder, int throttleTimeMs) { builder.addInt(0, throttleTimeMs, 0); }
  public static void addSealResponses(FlatBufferBuilder builder, int sealResponsesOffset) { builder.addOffset(1, sealResponsesOffset, 0); }
  public static int createSealResponsesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSealResponsesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addErrorCode(FlatBufferBuilder builder, short errorCode) { builder.addShort(2, errorCode, 0); }
  public static void addErrorMessage(FlatBufferBuilder builder, int errorMessageOffset) { builder.addOffset(3, errorMessageOffset, 0); }
  public static int endSealRangesResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SealRangesResponse get(int j) { return get(new SealRangesResponse(), j); }
    public SealRangesResponse get(SealRangesResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SealRangesResponseT unpack() {
    SealRangesResponseT _o = new SealRangesResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SealRangesResponseT _o) {
    int _oThrottleTimeMs = throttleTimeMs();
    _o.setThrottleTimeMs(_oThrottleTimeMs);
    header.SealRangesResultT[] _oSealResponses = new header.SealRangesResultT[sealResponsesLength()];
    for (int _j = 0; _j < sealResponsesLength(); ++_j) {_oSealResponses[_j] = (sealResponses(_j) != null ? sealResponses(_j).unpack() : null);}
    _o.setSealResponses(_oSealResponses);
    short _oErrorCode = errorCode();
    _o.setErrorCode(_oErrorCode);
    String _oErrorMessage = errorMessage();
    _o.setErrorMessage(_oErrorMessage);
  }
  public static int pack(FlatBufferBuilder builder, SealRangesResponseT _o) {
    if (_o == null) return 0;
    int _sealResponses = 0;
    if (_o.getSealResponses() != null) {
      int[] __sealResponses = new int[_o.getSealResponses().length];
      int _j = 0;
      for (header.SealRangesResultT _e : _o.getSealResponses()) { __sealResponses[_j] = header.SealRangesResult.pack(builder, _e); _j++;}
      _sealResponses = createSealResponsesVector(builder, __sealResponses);
    }
    int _errorMessage = _o.getErrorMessage() == null ? 0 : builder.createString(_o.getErrorMessage());
    return createSealRangesResponse(
      builder,
      _o.getThrottleTimeMs(),
      _sealResponses,
      _o.getErrorCode(),
      _errorMessage);
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FetchRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static FetchRequest getRootAsFetchRequest(ByteBuffer _bb) { return getRootAsFetchRequest(_bb, new FetchRequest()); }
  public static FetchRequest getRootAsFetchRequest(ByteBuffer _bb, FetchRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FetchRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int maxWaitMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int minBytes() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public header.FetchInfo fetchRequests(int j) { return fetchRequests(new header.FetchInfo(), j); }
  public header.FetchInfo fetchRequests(header.FetchInfo obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fetchRequestsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public header.FetchInfo.Vector fetchRequestsVector() { return fetchRequestsVector(new header.FetchInfo.Vector()); }
  public header.FetchInfo.Vector fetchRequestsVector(header.FetchInfo.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createFetchRequest(FlatBufferBuilder builder,
      int maxWaitMs,
      int minBytes,
      int fetchRequestsOffset) {
    builder.startTable(3);
    FetchRequest.addFetchRequests(builder, fetchRequestsOffset);
    FetchRequest.addMinBytes(builder, minBytes);
    FetchRequest.addMaxWaitMs(builder, maxWaitMs);
    return FetchRequest.endFetchRequest(builder);
  }

  public static void startFetchRequest(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addMaxWaitMs(FlatBufferBuilder builder, int maxWaitMs) { builder.addInt(0, maxWaitMs, 0); }
  public static void addMinBytes(FlatBufferBuilder builder, int minBytes) { builder.addInt(1, minBytes, 0); }
  public static void addFetchRequests(FlatBufferBuilder builder, int fetchRequestsOffset) { builder.addOffset(2, fetchRequestsOffset, 0); }
  public static int createFetchRequestsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFetchRequestsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endFetchRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FetchRequest get(int j) { return get(new FetchRequest(), j); }
    public FetchRequest get(FetchRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FetchRequestT unpack() {
    FetchRequestT _o = new FetchRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FetchRequestT _o) {
    int _oMaxWaitMs = maxWaitMs();
    _o.setMaxWaitMs(_oMaxWaitMs);
    int _oMinBytes = minBytes();
    _o.setMinBytes(_oMinBytes);
    header.FetchInfoT[] _oFetchRequests = new header.FetchInfoT[fetchRequestsLength()];
    for (int _j = 0; _j < fetchRequestsLength(); ++_j) {_oFetchRequests[_j] = (fetchRequests(_j) != null ? fetchRequests(_j).unpack() : null);}
    _o.setFetchRequests(_oFetchRequests);
  }
  public static int pack(FlatBufferBuilder builder, FetchRequestT _o) {
    if (_o == null) return 0;
    int _fetchRequests = 0;
    if (_o.getFetchRequests() != null) {
      int[] __fetchRequests = new int[_o.getFetchRequests().length];
      int _j = 0;
      for (header.FetchInfoT _e : _o.getFetchRequests()) { __fetchRequests[_j] = header.FetchInfo.pack(builder, _e); _j++;}
      _fetchRequests = createFetchRequestsVector(builder, __fetchRequests);
    }
    return createFetchRequest(
      builder,
      _o.getMaxWaitMs(),
      _o.getMinBytes(),
      _fetchRequests);
  }
}


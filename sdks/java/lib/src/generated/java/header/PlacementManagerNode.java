// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PlacementManagerNode extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static PlacementManagerNode getRootAsPlacementManagerNode(ByteBuffer _bb) { return getRootAsPlacementManagerNode(_bb, new PlacementManagerNode()); }
  public static PlacementManagerNode getRootAsPlacementManagerNode(ByteBuffer _bb, PlacementManagerNode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public PlacementManagerNode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String name() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer nameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer nameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public String advertiseAddr() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer advertiseAddrAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer advertiseAddrInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public boolean isLeader() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createPlacementManagerNode(FlatBufferBuilder builder,
      int nameOffset,
      int advertiseAddrOffset,
      boolean isLeader) {
    builder.startTable(3);
    PlacementManagerNode.addAdvertiseAddr(builder, advertiseAddrOffset);
    PlacementManagerNode.addName(builder, nameOffset);
    PlacementManagerNode.addIsLeader(builder, isLeader);
    return PlacementManagerNode.endPlacementManagerNode(builder);
  }

  public static void startPlacementManagerNode(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addName(FlatBufferBuilder builder, int nameOffset) { builder.addOffset(0, nameOffset, 0); }
  public static void addAdvertiseAddr(FlatBufferBuilder builder, int advertiseAddrOffset) { builder.addOffset(1, advertiseAddrOffset, 0); }
  public static void addIsLeader(FlatBufferBuilder builder, boolean isLeader) { builder.addBoolean(2, isLeader, false); }
  public static int endPlacementManagerNode(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public PlacementManagerNode get(int j) { return get(new PlacementManagerNode(), j); }
    public PlacementManagerNode get(PlacementManagerNode obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public PlacementManagerNodeT unpack() {
    PlacementManagerNodeT _o = new PlacementManagerNodeT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(PlacementManagerNodeT _o) {
    String _oName = name();
    _o.setName(_oName);
    String _oAdvertiseAddr = advertiseAddr();
    _o.setAdvertiseAddr(_oAdvertiseAddr);
    boolean _oIsLeader = isLeader();
    _o.setIsLeader(_oIsLeader);
  }
  public static int pack(FlatBufferBuilder builder, PlacementManagerNodeT _o) {
    if (_o == null) return 0;
    int _name = _o.getName() == null ? 0 : builder.createString(_o.getName());
    int _advertiseAddr = _o.getAdvertiseAddr() == null ? 0 : builder.createString(_o.getAdvertiseAddr());
    return createPlacementManagerNode(
      builder,
      _name,
      _advertiseAddr,
      _o.getIsLeader());
  }
}


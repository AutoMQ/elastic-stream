// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class AppendResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static AppendResult getRootAsAppendResult(ByteBuffer _bb) { return getRootAsAppendResult(_bb, new AppendResult()); }
  public static AppendResult getRootAsAppendResult(ByteBuffer _bb, AppendResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public AppendResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int requestIndex() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long baseOffset() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long streamAppendTimeMs() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public header.Status status() { return status(new header.Status()); }
  public header.Status status(header.Status obj) { int o = __offset(12); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createAppendResult(FlatBufferBuilder builder,
      long streamId,
      int requestIndex,
      long baseOffset,
      long streamAppendTimeMs,
      int statusOffset) {
    builder.startTable(5);
    AppendResult.addStreamAppendTimeMs(builder, streamAppendTimeMs);
    AppendResult.addBaseOffset(builder, baseOffset);
    AppendResult.addStreamId(builder, streamId);
    AppendResult.addStatus(builder, statusOffset);
    AppendResult.addRequestIndex(builder, requestIndex);
    return AppendResult.endAppendResult(builder);
  }

  public static void startAppendResult(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addRequestIndex(FlatBufferBuilder builder, int requestIndex) { builder.addInt(1, requestIndex, 0); }
  public static void addBaseOffset(FlatBufferBuilder builder, long baseOffset) { builder.addLong(2, baseOffset, 0L); }
  public static void addStreamAppendTimeMs(FlatBufferBuilder builder, long streamAppendTimeMs) { builder.addLong(3, streamAppendTimeMs, 0L); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(4, statusOffset, 0); }
  public static int endAppendResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public AppendResult get(int j) { return get(new AppendResult(), j); }
    public AppendResult get(AppendResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public AppendResultT unpack() {
    AppendResultT _o = new AppendResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(AppendResultT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    int _oRequestIndex = requestIndex();
    _o.setRequestIndex(_oRequestIndex);
    long _oBaseOffset = baseOffset();
    _o.setBaseOffset(_oBaseOffset);
    long _oStreamAppendTimeMs = streamAppendTimeMs();
    _o.setStreamAppendTimeMs(_oStreamAppendTimeMs);
    if (status() != null) _o.setStatus(status().unpack());
    else _o.setStatus(null);
  }
  public static int pack(FlatBufferBuilder builder, AppendResultT _o) {
    if (_o == null) return 0;
    int _status = _o.getStatus() == null ? 0 : header.Status.pack(builder, _o.getStatus());
    return createAppendResult(
      builder,
      _o.getStreamId(),
      _o.getRequestIndex(),
      _o.getBaseOffset(),
      _o.getStreamAppendTimeMs(),
      _status);
  }
}


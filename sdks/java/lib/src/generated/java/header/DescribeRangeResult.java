// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DescribeRangeResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static DescribeRangeResult getRootAsDescribeRangeResult(ByteBuffer _bb) { return getRootAsDescribeRangeResult(_bb, new DescribeRangeResult()); }
  public static DescribeRangeResult getRootAsDescribeRangeResult(ByteBuffer _bb, DescribeRangeResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DescribeRangeResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public header.Range ranges() { return ranges(new header.Range()); }
  public header.Range ranges(header.Range obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public header.Status status() { return status(new header.Status()); }
  public header.Status status(header.Status obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDescribeRangeResult(FlatBufferBuilder builder,
      long streamId,
      int rangesOffset,
      int statusOffset) {
    builder.startTable(3);
    DescribeRangeResult.addStreamId(builder, streamId);
    DescribeRangeResult.addStatus(builder, statusOffset);
    DescribeRangeResult.addRanges(builder, rangesOffset);
    return DescribeRangeResult.endDescribeRangeResult(builder);
  }

  public static void startDescribeRangeResult(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addRanges(FlatBufferBuilder builder, int rangesOffset) { builder.addOffset(1, rangesOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(2, statusOffset, 0); }
  public static int endDescribeRangeResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DescribeRangeResult get(int j) { return get(new DescribeRangeResult(), j); }
    public DescribeRangeResult get(DescribeRangeResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DescribeRangeResultT unpack() {
    DescribeRangeResultT _o = new DescribeRangeResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DescribeRangeResultT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    if (ranges() != null) _o.setRanges(ranges().unpack());
    else _o.setRanges(null);
    if (status() != null) _o.setStatus(status().unpack());
    else _o.setStatus(null);
  }
  public static int pack(FlatBufferBuilder builder, DescribeRangeResultT _o) {
    if (_o == null) return 0;
    int _ranges = _o.getRanges() == null ? 0 : header.Range.pack(builder, _o.getRanges());
    int _status = _o.getStatus() == null ? 0 : header.Status.pack(builder, _o.getStatus());
    return createDescribeRangeResult(
      builder,
      _o.getStreamId(),
      _ranges,
      _status);
  }
}


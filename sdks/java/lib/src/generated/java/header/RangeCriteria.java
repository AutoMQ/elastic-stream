// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RangeCriteria extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static RangeCriteria getRootAsRangeCriteria(ByteBuffer _bb) { return getRootAsRangeCriteria(_bb, new RangeCriteria()); }
  public static RangeCriteria getRootAsRangeCriteria(ByteBuffer _bb, RangeCriteria obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RangeCriteria __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public header.DataNode dataNode() { return dataNode(new header.DataNode()); }
  public header.DataNode dataNode(header.DataNode obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long streamId() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createRangeCriteria(FlatBufferBuilder builder,
      int dataNodeOffset,
      long streamId) {
    builder.startTable(2);
    RangeCriteria.addStreamId(builder, streamId);
    RangeCriteria.addDataNode(builder, dataNodeOffset);
    return RangeCriteria.endRangeCriteria(builder);
  }

  public static void startRangeCriteria(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDataNode(FlatBufferBuilder builder, int dataNodeOffset) { builder.addOffset(0, dataNodeOffset, 0); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(1, streamId, 0L); }
  public static int endRangeCriteria(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RangeCriteria get(int j) { return get(new RangeCriteria(), j); }
    public RangeCriteria get(RangeCriteria obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public RangeCriteriaT unpack() {
    RangeCriteriaT _o = new RangeCriteriaT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(RangeCriteriaT _o) {
    if (dataNode() != null) _o.setDataNode(dataNode().unpack());
    else _o.setDataNode(null);
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
  }
  public static int pack(FlatBufferBuilder builder, RangeCriteriaT _o) {
    if (_o == null) return 0;
    int _dataNode = _o.getDataNode() == null ? 0 : header.DataNode.pack(builder, _o.getDataNode());
    return createRangeCriteria(
      builder,
      _dataNode,
      _o.getStreamId());
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FetchResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static FetchResult getRootAsFetchResult(ByteBuffer _bb) { return getRootAsFetchResult(_bb, new FetchResult()); }
  public static FetchResult getRootAsFetchResult(ByteBuffer _bb, FetchResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FetchResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int requestIndex() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public short errorCode() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMessage() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMessageAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer errorMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }
  public int batchLength() { int o = __offset(12); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFetchResult(FlatBufferBuilder builder,
      long streamId,
      int requestIndex,
      short errorCode,
      int errorMessageOffset,
      int batchLength) {
    builder.startTable(5);
    FetchResult.addStreamId(builder, streamId);
    FetchResult.addBatchLength(builder, batchLength);
    FetchResult.addErrorMessage(builder, errorMessageOffset);
    FetchResult.addRequestIndex(builder, requestIndex);
    FetchResult.addErrorCode(builder, errorCode);
    return FetchResult.endFetchResult(builder);
  }

  public static void startFetchResult(FlatBufferBuilder builder) { builder.startTable(5); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addRequestIndex(FlatBufferBuilder builder, int requestIndex) { builder.addInt(1, requestIndex, 0); }
  public static void addErrorCode(FlatBufferBuilder builder, short errorCode) { builder.addShort(2, errorCode, 0); }
  public static void addErrorMessage(FlatBufferBuilder builder, int errorMessageOffset) { builder.addOffset(3, errorMessageOffset, 0); }
  public static void addBatchLength(FlatBufferBuilder builder, int batchLength) { builder.addInt(4, batchLength, 0); }
  public static int endFetchResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FetchResult get(int j) { return get(new FetchResult(), j); }
    public FetchResult get(FetchResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FetchResultT unpack() {
    FetchResultT _o = new FetchResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FetchResultT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    int _oRequestIndex = requestIndex();
    _o.setRequestIndex(_oRequestIndex);
    short _oErrorCode = errorCode();
    _o.setErrorCode(_oErrorCode);
    String _oErrorMessage = errorMessage();
    _o.setErrorMessage(_oErrorMessage);
    int _oBatchLength = batchLength();
    _o.setBatchLength(_oBatchLength);
  }
  public static int pack(FlatBufferBuilder builder, FetchResultT _o) {
    if (_o == null) return 0;
    int _errorMessage = _o.getErrorMessage() == null ? 0 : builder.createString(_o.getErrorMessage());
    return createFetchResult(
      builder,
      _o.getStreamId(),
      _o.getRequestIndex(),
      _o.getErrorCode(),
      _errorMessage,
      _o.getBatchLength());
  }
}


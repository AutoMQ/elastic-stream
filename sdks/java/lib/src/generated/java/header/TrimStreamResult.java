// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrimStreamResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static TrimStreamResult getRootAsTrimStreamResult(ByteBuffer _bb) { return getRootAsTrimStreamResult(_bb, new TrimStreamResult()); }
  public static TrimStreamResult getRootAsTrimStreamResult(ByteBuffer _bb, TrimStreamResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrimStreamResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public header.Stream trimmedStream() { return trimmedStream(new header.Stream()); }
  public header.Stream trimmedStream(header.Stream obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public short errorCode() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMessage() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMessageAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer errorMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public header.Range range() { return range(new header.Range()); }
  public header.Range range(header.Range obj) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTrimStreamResult(FlatBufferBuilder builder,
      int trimmedStreamOffset,
      short errorCode,
      int errorMessageOffset,
      int rangeOffset) {
    builder.startTable(4);
    TrimStreamResult.addRange(builder, rangeOffset);
    TrimStreamResult.addErrorMessage(builder, errorMessageOffset);
    TrimStreamResult.addTrimmedStream(builder, trimmedStreamOffset);
    TrimStreamResult.addErrorCode(builder, errorCode);
    return TrimStreamResult.endTrimStreamResult(builder);
  }

  public static void startTrimStreamResult(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addTrimmedStream(FlatBufferBuilder builder, int trimmedStreamOffset) { builder.addOffset(0, trimmedStreamOffset, 0); }
  public static void addErrorCode(FlatBufferBuilder builder, short errorCode) { builder.addShort(1, errorCode, 0); }
  public static void addErrorMessage(FlatBufferBuilder builder, int errorMessageOffset) { builder.addOffset(2, errorMessageOffset, 0); }
  public static void addRange(FlatBufferBuilder builder, int rangeOffset) { builder.addOffset(3, rangeOffset, 0); }
  public static int endTrimStreamResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrimStreamResult get(int j) { return get(new TrimStreamResult(), j); }
    public TrimStreamResult get(TrimStreamResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


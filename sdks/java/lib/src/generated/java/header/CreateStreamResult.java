// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class CreateStreamResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static CreateStreamResult getRootAsCreateStreamResult(ByteBuffer _bb) { return getRootAsCreateStreamResult(_bb, new CreateStreamResult()); }
  public static CreateStreamResult getRootAsCreateStreamResult(ByteBuffer _bb, CreateStreamResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CreateStreamResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public header.Stream stream() { return stream(new header.Stream()); }
  public header.Stream stream(header.Stream obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public short errorCode() { int o = __offset(6); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMessage() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMessageAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer errorMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }

  public static int createCreateStreamResult(FlatBufferBuilder builder,
      int streamOffset,
      short errorCode,
      int errorMessageOffset) {
    builder.startTable(3);
    CreateStreamResult.addErrorMessage(builder, errorMessageOffset);
    CreateStreamResult.addStream(builder, streamOffset);
    CreateStreamResult.addErrorCode(builder, errorCode);
    return CreateStreamResult.endCreateStreamResult(builder);
  }

  public static void startCreateStreamResult(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStream(FlatBufferBuilder builder, int streamOffset) { builder.addOffset(0, streamOffset, 0); }
  public static void addErrorCode(FlatBufferBuilder builder, short errorCode) { builder.addShort(1, errorCode, 0); }
  public static void addErrorMessage(FlatBufferBuilder builder, int errorMessageOffset) { builder.addOffset(2, errorMessageOffset, 0); }
  public static int endCreateStreamResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CreateStreamResult get(int j) { return get(new CreateStreamResult(), j); }
    public CreateStreamResult get(CreateStreamResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public CreateStreamResultT unpack() {
    CreateStreamResultT _o = new CreateStreamResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(CreateStreamResultT _o) {
    if (stream() != null) _o.setStream(stream().unpack());
    else _o.setStream(null);
    short _oErrorCode = errorCode();
    _o.setErrorCode(_oErrorCode);
    String _oErrorMessage = errorMessage();
    _o.setErrorMessage(_oErrorMessage);
  }
  public static int pack(FlatBufferBuilder builder, CreateStreamResultT _o) {
    if (_o == null) return 0;
    int _stream = _o.getStream() == null ? 0 : header.Stream.pack(builder, _o.getStream());
    int _errorMessage = _o.getErrorMessage() == null ? 0 : builder.createString(_o.getErrorMessage());
    return createCreateStreamResult(
      builder,
      _stream,
      _o.getErrorCode(),
      _errorMessage);
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DeleteStreamResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static DeleteStreamResult getRootAsDeleteStreamResult(ByteBuffer _bb) { return getRootAsDeleteStreamResult(_bb, new DeleteStreamResult()); }
  public static DeleteStreamResult getRootAsDeleteStreamResult(ByteBuffer _bb, DeleteStreamResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DeleteStreamResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public header.Stream deletedStream() { return deletedStream(new header.Stream()); }
  public header.Stream deletedStream(header.Stream obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public header.Status status() { return status(new header.Status()); }
  public header.Status status(header.Status obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createDeleteStreamResult(FlatBufferBuilder builder,
      int deletedStreamOffset,
      int statusOffset) {
    builder.startTable(2);
    DeleteStreamResult.addStatus(builder, statusOffset);
    DeleteStreamResult.addDeletedStream(builder, deletedStreamOffset);
    return DeleteStreamResult.endDeleteStreamResult(builder);
  }

  public static void startDeleteStreamResult(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addDeletedStream(FlatBufferBuilder builder, int deletedStreamOffset) { builder.addOffset(0, deletedStreamOffset, 0); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(1, statusOffset, 0); }
  public static int endDeleteStreamResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DeleteStreamResult get(int j) { return get(new DeleteStreamResult(), j); }
    public DeleteStreamResult get(DeleteStreamResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DeleteStreamResultT unpack() {
    DeleteStreamResultT _o = new DeleteStreamResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DeleteStreamResultT _o) {
    if (deletedStream() != null) _o.setDeletedStream(deletedStream().unpack());
    else _o.setDeletedStream(null);
    if (status() != null) _o.setStatus(status().unpack());
    else _o.setStatus(null);
  }
  public static int pack(FlatBufferBuilder builder, DeleteStreamResultT _o) {
    if (_o == null) return 0;
    int _deletedStream = _o.getDeletedStream() == null ? 0 : header.Stream.pack(builder, _o.getDeletedStream());
    int _status = _o.getStatus() == null ? 0 : header.Status.pack(builder, _o.getStatus());
    return createDeleteStreamResult(
      builder,
      _deletedStream,
      _status);
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FetchInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static FetchInfo getRootAsFetchInfo(ByteBuffer _bb) { return getRootAsFetchInfo(_bb, new FetchInfo()); }
  public static FetchInfo getRootAsFetchInfo(ByteBuffer _bb, FetchInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FetchInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int requestIndex() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public long fetchOffset() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public int batchMaxBytes() { int o = __offset(10); return o != 0 ? bb.getInt(o + bb_pos) : 0; }

  public static int createFetchInfo(FlatBufferBuilder builder,
      long streamId,
      int requestIndex,
      long fetchOffset,
      int batchMaxBytes) {
    builder.startTable(4);
    FetchInfo.addFetchOffset(builder, fetchOffset);
    FetchInfo.addStreamId(builder, streamId);
    FetchInfo.addBatchMaxBytes(builder, batchMaxBytes);
    FetchInfo.addRequestIndex(builder, requestIndex);
    return FetchInfo.endFetchInfo(builder);
  }

  public static void startFetchInfo(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addRequestIndex(FlatBufferBuilder builder, int requestIndex) { builder.addInt(1, requestIndex, 0); }
  public static void addFetchOffset(FlatBufferBuilder builder, long fetchOffset) { builder.addLong(2, fetchOffset, 0L); }
  public static void addBatchMaxBytes(FlatBufferBuilder builder, int batchMaxBytes) { builder.addInt(3, batchMaxBytes, 0); }
  public static int endFetchInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FetchInfo get(int j) { return get(new FetchInfo(), j); }
    public FetchInfo get(FetchInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FetchInfoT unpack() {
    FetchInfoT _o = new FetchInfoT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FetchInfoT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    int _oRequestIndex = requestIndex();
    _o.setRequestIndex(_oRequestIndex);
    long _oFetchOffset = fetchOffset();
    _o.setFetchOffset(_oFetchOffset);
    int _oBatchMaxBytes = batchMaxBytes();
    _o.setBatchMaxBytes(_oBatchMaxBytes);
  }
  public static int pack(FlatBufferBuilder builder, FetchInfoT _o) {
    if (_o == null) return 0;
    return createFetchInfo(
      builder,
      _o.getStreamId(),
      _o.getRequestIndex(),
      _o.getFetchOffset(),
      _o.getBatchMaxBytes());
  }
}


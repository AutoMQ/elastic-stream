// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class SealRangesResult extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static SealRangesResult getRootAsSealRangesResult(ByteBuffer _bb) { return getRootAsSealRangesResult(_bb, new SealRangesResult()); }
  public static SealRangesResult getRootAsSealRangesResult(ByteBuffer _bb, SealRangesResult obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public SealRangesResult __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public header.Range ranges(int j) { return ranges(new header.Range(), j); }
  public header.Range ranges(header.Range obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int rangesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public header.Range.Vector rangesVector() { return rangesVector(new header.Range.Vector()); }
  public header.Range.Vector rangesVector(header.Range.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public header.Status status() { return status(new header.Status()); }
  public header.Status status(header.Status obj) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createSealRangesResult(FlatBufferBuilder builder,
      long streamId,
      int rangesOffset,
      int statusOffset) {
    builder.startTable(3);
    SealRangesResult.addStreamId(builder, streamId);
    SealRangesResult.addStatus(builder, statusOffset);
    SealRangesResult.addRanges(builder, rangesOffset);
    return SealRangesResult.endSealRangesResult(builder);
  }

  public static void startSealRangesResult(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addRanges(FlatBufferBuilder builder, int rangesOffset) { builder.addOffset(1, rangesOffset, 0); }
  public static int createRangesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startRangesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addStatus(FlatBufferBuilder builder, int statusOffset) { builder.addOffset(2, statusOffset, 0); }
  public static int endSealRangesResult(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public SealRangesResult get(int j) { return get(new SealRangesResult(), j); }
    public SealRangesResult get(SealRangesResult obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public SealRangesResultT unpack() {
    SealRangesResultT _o = new SealRangesResultT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(SealRangesResultT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    header.RangeT[] _oRanges = new header.RangeT[rangesLength()];
    for (int _j = 0; _j < rangesLength(); ++_j) {_oRanges[_j] = (ranges(_j) != null ? ranges(_j).unpack() : null);}
    _o.setRanges(_oRanges);
    if (status() != null) _o.setStatus(status().unpack());
    else _o.setStatus(null);
  }
  public static int pack(FlatBufferBuilder builder, SealRangesResultT _o) {
    if (_o == null) return 0;
    int _ranges = 0;
    if (_o.getRanges() != null) {
      int[] __ranges = new int[_o.getRanges().length];
      int _j = 0;
      for (header.RangeT _e : _o.getRanges()) { __ranges[_j] = header.Range.pack(builder, _e); _j++;}
      _ranges = createRangesVector(builder, __ranges);
    }
    int _status = _o.getStatus() == null ? 0 : header.Status.pack(builder, _o.getStatus());
    return createSealRangesResult(
      builder,
      _o.getStreamId(),
      _ranges,
      _status);
  }
}


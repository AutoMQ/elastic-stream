// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrimStreamsRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static TrimStreamsRequest getRootAsTrimStreamsRequest(ByteBuffer _bb) { return getRootAsTrimStreamsRequest(_bb, new TrimStreamsRequest()); }
  public static TrimStreamsRequest getRootAsTrimStreamsRequest(ByteBuffer _bb, TrimStreamsRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrimStreamsRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int timeoutMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public header.TrimmedStream trimmedStreams(int j) { return trimmedStreams(new header.TrimmedStream(), j); }
  public header.TrimmedStream trimmedStreams(header.TrimmedStream obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int trimmedStreamsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public header.TrimmedStream.Vector trimmedStreamsVector() { return trimmedStreamsVector(new header.TrimmedStream.Vector()); }
  public header.TrimmedStream.Vector trimmedStreamsVector(header.TrimmedStream.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createTrimStreamsRequest(FlatBufferBuilder builder,
      int timeoutMs,
      int trimmedStreamsOffset) {
    builder.startTable(2);
    TrimStreamsRequest.addTrimmedStreams(builder, trimmedStreamsOffset);
    TrimStreamsRequest.addTimeoutMs(builder, timeoutMs);
    return TrimStreamsRequest.endTrimStreamsRequest(builder);
  }

  public static void startTrimStreamsRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimeoutMs(FlatBufferBuilder builder, int timeoutMs) { builder.addInt(0, timeoutMs, 0); }
  public static void addTrimmedStreams(FlatBufferBuilder builder, int trimmedStreamsOffset) { builder.addOffset(1, trimmedStreamsOffset, 0); }
  public static int createTrimmedStreamsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startTrimmedStreamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endTrimStreamsRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrimStreamsRequest get(int j) { return get(new TrimStreamsRequest(), j); }
    public TrimStreamsRequest get(TrimStreamsRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrimStreamsRequestT unpack() {
    TrimStreamsRequestT _o = new TrimStreamsRequestT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrimStreamsRequestT _o) {
    int _oTimeoutMs = timeoutMs();
    _o.setTimeoutMs(_oTimeoutMs);
    header.TrimmedStreamT[] _oTrimmedStreams = new header.TrimmedStreamT[trimmedStreamsLength()];
    for (int _j = 0; _j < trimmedStreamsLength(); ++_j) {_oTrimmedStreams[_j] = (trimmedStreams(_j) != null ? trimmedStreams(_j).unpack() : null);}
    _o.setTrimmedStreams(_oTrimmedStreams);
  }
  public static int pack(FlatBufferBuilder builder, TrimStreamsRequestT _o) {
    if (_o == null) return 0;
    int _trimmedStreams = 0;
    if (_o.getTrimmedStreams() != null) {
      int[] __trimmedStreams = new int[_o.getTrimmedStreams().length];
      int _j = 0;
      for (header.TrimmedStreamT _e : _o.getTrimmedStreams()) { __trimmedStreams[_j] = header.TrimmedStream.pack(builder, _e); _j++;}
      _trimmedStreams = createTrimmedStreamsVector(builder, __trimmedStreams);
    }
    return createTrimStreamsRequest(
      builder,
      _o.getTimeoutMs(),
      _trimmedStreams);
  }
}


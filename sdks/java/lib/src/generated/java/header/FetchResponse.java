// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class FetchResponse extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static FetchResponse getRootAsFetchResponse(ByteBuffer _bb) { return getRootAsFetchResponse(_bb, new FetchResponse()); }
  public static FetchResponse getRootAsFetchResponse(ByteBuffer _bb, FetchResponse obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public FetchResponse __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int throttleTimeMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public header.FetchResult fetchResponses(int j) { return fetchResponses(new header.FetchResult(), j); }
  public header.FetchResult fetchResponses(header.FetchResult obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int fetchResponsesLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public header.FetchResult.Vector fetchResponsesVector() { return fetchResponsesVector(new header.FetchResult.Vector()); }
  public header.FetchResult.Vector fetchResponsesVector(header.FetchResult.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public short errorCode() { int o = __offset(8); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public String errorMessage() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer errorMessageAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer errorMessageInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createFetchResponse(FlatBufferBuilder builder,
      int throttleTimeMs,
      int fetchResponsesOffset,
      short errorCode,
      int errorMessageOffset) {
    builder.startTable(4);
    FetchResponse.addErrorMessage(builder, errorMessageOffset);
    FetchResponse.addFetchResponses(builder, fetchResponsesOffset);
    FetchResponse.addThrottleTimeMs(builder, throttleTimeMs);
    FetchResponse.addErrorCode(builder, errorCode);
    return FetchResponse.endFetchResponse(builder);
  }

  public static void startFetchResponse(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addThrottleTimeMs(FlatBufferBuilder builder, int throttleTimeMs) { builder.addInt(0, throttleTimeMs, 0); }
  public static void addFetchResponses(FlatBufferBuilder builder, int fetchResponsesOffset) { builder.addOffset(1, fetchResponsesOffset, 0); }
  public static int createFetchResponsesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startFetchResponsesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addErrorCode(FlatBufferBuilder builder, short errorCode) { builder.addShort(2, errorCode, 0); }
  public static void addErrorMessage(FlatBufferBuilder builder, int errorMessageOffset) { builder.addOffset(3, errorMessageOffset, 0); }
  public static int endFetchResponse(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public FetchResponse get(int j) { return get(new FetchResponse(), j); }
    public FetchResponse get(FetchResponse obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public FetchResponseT unpack() {
    FetchResponseT _o = new FetchResponseT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(FetchResponseT _o) {
    int _oThrottleTimeMs = throttleTimeMs();
    _o.setThrottleTimeMs(_oThrottleTimeMs);
    header.FetchResultT[] _oFetchResponses = new header.FetchResultT[fetchResponsesLength()];
    for (int _j = 0; _j < fetchResponsesLength(); ++_j) {_oFetchResponses[_j] = (fetchResponses(_j) != null ? fetchResponses(_j).unpack() : null);}
    _o.setFetchResponses(_oFetchResponses);
    short _oErrorCode = errorCode();
    _o.setErrorCode(_oErrorCode);
    String _oErrorMessage = errorMessage();
    _o.setErrorMessage(_oErrorMessage);
  }
  public static int pack(FlatBufferBuilder builder, FetchResponseT _o) {
    if (_o == null) return 0;
    int _fetchResponses = 0;
    if (_o.getFetchResponses() != null) {
      int[] __fetchResponses = new int[_o.getFetchResponses().length];
      int _j = 0;
      for (header.FetchResultT _e : _o.getFetchResponses()) { __fetchResponses[_j] = header.FetchResult.pack(builder, _e); _j++;}
      _fetchResponses = createFetchResponsesVector(builder, __fetchResponses);
    }
    int _errorMessage = _o.getErrorMessage() == null ? 0 : builder.createString(_o.getErrorMessage());
    return createFetchResponse(
      builder,
      _o.getThrottleTimeMs(),
      _fetchResponses,
      _o.getErrorCode(),
      _errorMessage);
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class TrimmedStream extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static TrimmedStream getRootAsTrimmedStream(ByteBuffer _bb) { return getRootAsTrimmedStream(_bb, new TrimmedStream()); }
  public static TrimmedStream getRootAsTrimmedStream(ByteBuffer _bb, TrimmedStream obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public TrimmedStream __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long trimOffset() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createTrimmedStream(FlatBufferBuilder builder,
      long streamId,
      long trimOffset) {
    builder.startTable(2);
    TrimmedStream.addTrimOffset(builder, trimOffset);
    TrimmedStream.addStreamId(builder, streamId);
    return TrimmedStream.endTrimmedStream(builder);
  }

  public static void startTrimmedStream(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, 0L); }
  public static void addTrimOffset(FlatBufferBuilder builder, long trimOffset) { builder.addLong(1, trimOffset, 0L); }
  public static int endTrimmedStream(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public TrimmedStream get(int j) { return get(new TrimmedStream(), j); }
    public TrimmedStream get(TrimmedStream obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public TrimmedStreamT unpack() {
    TrimmedStreamT _o = new TrimmedStreamT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(TrimmedStreamT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    long _oTrimOffset = trimOffset();
    _o.setTrimOffset(_oTrimOffset);
  }
  public static int pack(FlatBufferBuilder builder, TrimmedStreamT _o) {
    if (_o == null) return 0;
    return createTrimmedStream(
      builder,
      _o.getStreamId(),
      _o.getTrimOffset());
  }
}


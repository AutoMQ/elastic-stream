// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class ReportMetricsRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static ReportMetricsRequest getRootAsReportMetricsRequest(ByteBuffer _bb) { return getRootAsReportMetricsRequest(_bb, new ReportMetricsRequest()); }
  public static ReportMetricsRequest getRootAsReportMetricsRequest(ByteBuffer _bb, ReportMetricsRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public ReportMetricsRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public header.DataNode dataNode() { return dataNode(new header.DataNode()); }
  public header.DataNode dataNode(header.DataNode obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public long diskInRate() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskOutRate() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskFreeSpace() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskUnindexedDataSize() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long memoryUsed() { int o = __offset(14); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public short uringTaskRate() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short uringInflightTaskCnt() { int o = __offset(18); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int uringPendingTaskCnt() { int o = __offset(20); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public short uringTaskAvgLatency() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkAppendRate() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFetchRate() { int o = __offset(26); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFailedAppendRate() { int o = __offset(28); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFailedFetchRate() { int o = __offset(30); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkAppendAvgLatency() { int o = __offset(32); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFetchAvgLatency() { int o = __offset(34); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rangeMissingReplicaCnt() { int o = __offset(36); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rangeActiveCnt() { int o = __offset(38); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createReportMetricsRequest(FlatBufferBuilder builder,
      int dataNodeOffset,
      long diskInRate,
      long diskOutRate,
      long diskFreeSpace,
      long diskUnindexedDataSize,
      long memoryUsed,
      short uringTaskRate,
      short uringInflightTaskCnt,
      int uringPendingTaskCnt,
      short uringTaskAvgLatency,
      short networkAppendRate,
      short networkFetchRate,
      short networkFailedAppendRate,
      short networkFailedFetchRate,
      short networkAppendAvgLatency,
      short networkFetchAvgLatency,
      short rangeMissingReplicaCnt,
      short rangeActiveCnt) {
    builder.startTable(18);
    ReportMetricsRequest.addMemoryUsed(builder, memoryUsed);
    ReportMetricsRequest.addDiskUnindexedDataSize(builder, diskUnindexedDataSize);
    ReportMetricsRequest.addDiskFreeSpace(builder, diskFreeSpace);
    ReportMetricsRequest.addDiskOutRate(builder, diskOutRate);
    ReportMetricsRequest.addDiskInRate(builder, diskInRate);
    ReportMetricsRequest.addUringPendingTaskCnt(builder, uringPendingTaskCnt);
    ReportMetricsRequest.addDataNode(builder, dataNodeOffset);
    ReportMetricsRequest.addRangeActiveCnt(builder, rangeActiveCnt);
    ReportMetricsRequest.addRangeMissingReplicaCnt(builder, rangeMissingReplicaCnt);
    ReportMetricsRequest.addNetworkFetchAvgLatency(builder, networkFetchAvgLatency);
    ReportMetricsRequest.addNetworkAppendAvgLatency(builder, networkAppendAvgLatency);
    ReportMetricsRequest.addNetworkFailedFetchRate(builder, networkFailedFetchRate);
    ReportMetricsRequest.addNetworkFailedAppendRate(builder, networkFailedAppendRate);
    ReportMetricsRequest.addNetworkFetchRate(builder, networkFetchRate);
    ReportMetricsRequest.addNetworkAppendRate(builder, networkAppendRate);
    ReportMetricsRequest.addUringTaskAvgLatency(builder, uringTaskAvgLatency);
    ReportMetricsRequest.addUringInflightTaskCnt(builder, uringInflightTaskCnt);
    ReportMetricsRequest.addUringTaskRate(builder, uringTaskRate);
    return ReportMetricsRequest.endReportMetricsRequest(builder);
  }

  public static void startReportMetricsRequest(FlatBufferBuilder builder) { builder.startTable(18); }
  public static void addDataNode(FlatBufferBuilder builder, int dataNodeOffset) { builder.addOffset(0, dataNodeOffset, 0); }
  public static void addDiskInRate(FlatBufferBuilder builder, long diskInRate) { builder.addLong(1, diskInRate, 0L); }
  public static void addDiskOutRate(FlatBufferBuilder builder, long diskOutRate) { builder.addLong(2, diskOutRate, 0L); }
  public static void addDiskFreeSpace(FlatBufferBuilder builder, long diskFreeSpace) { builder.addLong(3, diskFreeSpace, 0L); }
  public static void addDiskUnindexedDataSize(FlatBufferBuilder builder, long diskUnindexedDataSize) { builder.addLong(4, diskUnindexedDataSize, 0L); }
  public static void addMemoryUsed(FlatBufferBuilder builder, long memoryUsed) { builder.addLong(5, memoryUsed, 0L); }
  public static void addUringTaskRate(FlatBufferBuilder builder, short uringTaskRate) { builder.addShort(6, uringTaskRate, 0); }
  public static void addUringInflightTaskCnt(FlatBufferBuilder builder, short uringInflightTaskCnt) { builder.addShort(7, uringInflightTaskCnt, 0); }
  public static void addUringPendingTaskCnt(FlatBufferBuilder builder, int uringPendingTaskCnt) { builder.addInt(8, uringPendingTaskCnt, 0); }
  public static void addUringTaskAvgLatency(FlatBufferBuilder builder, short uringTaskAvgLatency) { builder.addShort(9, uringTaskAvgLatency, 0); }
  public static void addNetworkAppendRate(FlatBufferBuilder builder, short networkAppendRate) { builder.addShort(10, networkAppendRate, 0); }
  public static void addNetworkFetchRate(FlatBufferBuilder builder, short networkFetchRate) { builder.addShort(11, networkFetchRate, 0); }
  public static void addNetworkFailedAppendRate(FlatBufferBuilder builder, short networkFailedAppendRate) { builder.addShort(12, networkFailedAppendRate, 0); }
  public static void addNetworkFailedFetchRate(FlatBufferBuilder builder, short networkFailedFetchRate) { builder.addShort(13, networkFailedFetchRate, 0); }
  public static void addNetworkAppendAvgLatency(FlatBufferBuilder builder, short networkAppendAvgLatency) { builder.addShort(14, networkAppendAvgLatency, 0); }
  public static void addNetworkFetchAvgLatency(FlatBufferBuilder builder, short networkFetchAvgLatency) { builder.addShort(15, networkFetchAvgLatency, 0); }
  public static void addRangeMissingReplicaCnt(FlatBufferBuilder builder, short rangeMissingReplicaCnt) { builder.addShort(16, rangeMissingReplicaCnt, 0); }
  public static void addRangeActiveCnt(FlatBufferBuilder builder, short rangeActiveCnt) { builder.addShort(17, rangeActiveCnt, 0); }
  public static int endReportMetricsRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public ReportMetricsRequest get(int j) { return get(new ReportMetricsRequest(), j); }
    public ReportMetricsRequest get(ReportMetricsRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


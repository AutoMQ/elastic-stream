// automatically generated by the FlatBuffers compiler, do not modify

package header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class UpdateStreamsRequest extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static UpdateStreamsRequest getRootAsUpdateStreamsRequest(ByteBuffer _bb) { return getRootAsUpdateStreamsRequest(_bb, new UpdateStreamsRequest()); }
  public static UpdateStreamsRequest getRootAsUpdateStreamsRequest(ByteBuffer _bb, UpdateStreamsRequest obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public UpdateStreamsRequest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int timeoutMs() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public header.Stream streams(int j) { return streams(new header.Stream(), j); }
  public header.Stream streams(header.Stream obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int streamsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public header.Stream.Vector streamsVector() { return streamsVector(new header.Stream.Vector()); }
  public header.Stream.Vector streamsVector(header.Stream.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createUpdateStreamsRequest(FlatBufferBuilder builder,
      int timeoutMs,
      int streamsOffset) {
    builder.startTable(2);
    UpdateStreamsRequest.addStreams(builder, streamsOffset);
    UpdateStreamsRequest.addTimeoutMs(builder, timeoutMs);
    return UpdateStreamsRequest.endUpdateStreamsRequest(builder);
  }

  public static void startUpdateStreamsRequest(FlatBufferBuilder builder) { builder.startTable(2); }
  public static void addTimeoutMs(FlatBufferBuilder builder, int timeoutMs) { builder.addInt(0, timeoutMs, 0); }
  public static void addStreams(FlatBufferBuilder builder, int streamsOffset) { builder.addOffset(1, streamsOffset, 0); }
  public static int createStreamsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStreamsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endUpdateStreamsRequest(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public UpdateStreamsRequest get(int j) { return get(new UpdateStreamsRequest(), j); }
    public UpdateStreamsRequest get(UpdateStreamsRequest obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


// automatically generated by the FlatBuffers compiler, do not modify

package records;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class RecordMeta extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_1_21(); }
  public static RecordMeta getRootAsRecordMeta(ByteBuffer _bb) { return getRootAsRecordMeta(_bb, new RecordMeta()); }
  public static RecordMeta getRootAsRecordMeta(ByteBuffer _bb, RecordMeta obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public RecordMeta __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int offsetDelta() { int o = __offset(4); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int timestampDelta() { int o = __offset(6); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public records.KeyValue headers(int j) { return headers(new records.KeyValue(), j); }
  public records.KeyValue headers(records.KeyValue obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int headersLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public records.KeyValue.Vector headersVector() { return headersVector(new records.KeyValue.Vector()); }
  public records.KeyValue.Vector headersVector(records.KeyValue.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public records.KeyValue properties(int j) { return properties(new records.KeyValue(), j); }
  public records.KeyValue properties(records.KeyValue obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int propertiesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public records.KeyValue.Vector propertiesVector() { return propertiesVector(new records.KeyValue.Vector()); }
  public records.KeyValue.Vector propertiesVector(records.KeyValue.Vector obj) { int o = __offset(10); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createRecordMeta(FlatBufferBuilder builder,
      int offsetDelta,
      int timestampDelta,
      int headersOffset,
      int propertiesOffset) {
    builder.startTable(4);
    RecordMeta.addProperties(builder, propertiesOffset);
    RecordMeta.addHeaders(builder, headersOffset);
    RecordMeta.addTimestampDelta(builder, timestampDelta);
    RecordMeta.addOffsetDelta(builder, offsetDelta);
    return RecordMeta.endRecordMeta(builder);
  }

  public static void startRecordMeta(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addOffsetDelta(FlatBufferBuilder builder, int offsetDelta) { builder.addInt(0, offsetDelta, 0); }
  public static void addTimestampDelta(FlatBufferBuilder builder, int timestampDelta) { builder.addInt(1, timestampDelta, 0); }
  public static void addHeaders(FlatBufferBuilder builder, int headersOffset) { builder.addOffset(2, headersOffset, 0); }
  public static int createHeadersVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startHeadersVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addProperties(FlatBufferBuilder builder, int propertiesOffset) { builder.addOffset(3, propertiesOffset, 0); }
  public static int createPropertiesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endRecordMeta(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public RecordMeta get(int j) { return get(new RecordMeta(), j); }
    public RecordMeta get(RecordMeta obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}


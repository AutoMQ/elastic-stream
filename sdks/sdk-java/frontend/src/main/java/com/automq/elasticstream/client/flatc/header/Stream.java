// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class Stream extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static Stream getRootAsStream(ByteBuffer _bb) { return getRootAsStream(_bb, new Stream()); }
  public static Stream getRootAsStream(ByteBuffer _bb, Stream obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Stream __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long streamId() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : -1L; }
  public byte replica() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public byte ackCount() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public long retentionPeriodMs() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createStream(FlatBufferBuilder builder,
      long streamId,
      byte replica,
      byte ackCount,
      long retentionPeriodMs) {
    builder.startTable(4);
    Stream.addRetentionPeriodMs(builder, retentionPeriodMs);
    Stream.addStreamId(builder, streamId);
    Stream.addAckCount(builder, ackCount);
    Stream.addReplica(builder, replica);
    return Stream.endStream(builder);
  }

  public static void startStream(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addStreamId(FlatBufferBuilder builder, long streamId) { builder.addLong(0, streamId, -1L); }
  public static void addReplica(FlatBufferBuilder builder, byte replica) { builder.addByte(1, replica, 0); }
  public static void addAckCount(FlatBufferBuilder builder, byte ackCount) { builder.addByte(2, ackCount, 0); }
  public static void addRetentionPeriodMs(FlatBufferBuilder builder, long retentionPeriodMs) { builder.addLong(3, retentionPeriodMs, 0L); }
  public static int endStream(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Stream get(int j) { return get(new Stream(), j); }
    public Stream get(Stream obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public StreamT unpack() {
    StreamT _o = new StreamT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(StreamT _o) {
    long _oStreamId = streamId();
    _o.setStreamId(_oStreamId);
    byte _oReplica = replica();
    _o.setReplica(_oReplica);
    byte _oAckCount = ackCount();
    _o.setAckCount(_oAckCount);
    long _oRetentionPeriodMs = retentionPeriodMs();
    _o.setRetentionPeriodMs(_oRetentionPeriodMs);
  }
  public static int pack(FlatBufferBuilder builder, StreamT _o) {
    if (_o == null) return 0;
    return createStream(
      builder,
      _o.getStreamId(),
      _o.getReplica(),
      _o.getAckCount(),
      _o.getRetentionPeriodMs());
  }
}


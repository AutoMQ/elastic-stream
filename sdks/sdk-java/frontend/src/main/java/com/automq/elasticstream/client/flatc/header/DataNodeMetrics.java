// automatically generated by the FlatBuffers compiler, do not modify

package com.automq.elasticstream.client.flatc.header;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.BooleanVector;
import com.google.flatbuffers.ByteVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.DoubleVector;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.FloatVector;
import com.google.flatbuffers.IntVector;
import com.google.flatbuffers.LongVector;
import com.google.flatbuffers.ShortVector;
import com.google.flatbuffers.StringVector;
import com.google.flatbuffers.Struct;
import com.google.flatbuffers.Table;
import com.google.flatbuffers.UnionVector;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class DataNodeMetrics extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_23_3_3(); }
  public static DataNodeMetrics getRootAsDataNodeMetrics(ByteBuffer _bb) { return getRootAsDataNodeMetrics(_bb, new DataNodeMetrics()); }
  public static DataNodeMetrics getRootAsDataNodeMetrics(ByteBuffer _bb, DataNodeMetrics obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public DataNodeMetrics __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public long diskInRate() { int o = __offset(4); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskOutRate() { int o = __offset(6); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskFreeSpace() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long diskUnindexedDataSize() { int o = __offset(10); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public long memoryUsed() { int o = __offset(12); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }
  public short uringTaskRate() { int o = __offset(14); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short uringInflightTaskCnt() { int o = __offset(16); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public int uringPendingTaskCnt() { int o = __offset(18); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public short uringTaskAvgLatency() { int o = __offset(20); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkAppendRate() { int o = __offset(22); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFetchRate() { int o = __offset(24); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFailedAppendRate() { int o = __offset(26); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFailedFetchRate() { int o = __offset(28); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkAppendAvgLatency() { int o = __offset(30); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short networkFetchAvgLatency() { int o = __offset(32); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rangeMissingReplicaCnt() { int o = __offset(34); return o != 0 ? bb.getShort(o + bb_pos) : 0; }
  public short rangeActiveCnt() { int o = __offset(36); return o != 0 ? bb.getShort(o + bb_pos) : 0; }

  public static int createDataNodeMetrics(FlatBufferBuilder builder,
      long diskInRate,
      long diskOutRate,
      long diskFreeSpace,
      long diskUnindexedDataSize,
      long memoryUsed,
      short uringTaskRate,
      short uringInflightTaskCnt,
      int uringPendingTaskCnt,
      short uringTaskAvgLatency,
      short networkAppendRate,
      short networkFetchRate,
      short networkFailedAppendRate,
      short networkFailedFetchRate,
      short networkAppendAvgLatency,
      short networkFetchAvgLatency,
      short rangeMissingReplicaCnt,
      short rangeActiveCnt) {
    builder.startTable(17);
    DataNodeMetrics.addMemoryUsed(builder, memoryUsed);
    DataNodeMetrics.addDiskUnindexedDataSize(builder, diskUnindexedDataSize);
    DataNodeMetrics.addDiskFreeSpace(builder, diskFreeSpace);
    DataNodeMetrics.addDiskOutRate(builder, diskOutRate);
    DataNodeMetrics.addDiskInRate(builder, diskInRate);
    DataNodeMetrics.addUringPendingTaskCnt(builder, uringPendingTaskCnt);
    DataNodeMetrics.addRangeActiveCnt(builder, rangeActiveCnt);
    DataNodeMetrics.addRangeMissingReplicaCnt(builder, rangeMissingReplicaCnt);
    DataNodeMetrics.addNetworkFetchAvgLatency(builder, networkFetchAvgLatency);
    DataNodeMetrics.addNetworkAppendAvgLatency(builder, networkAppendAvgLatency);
    DataNodeMetrics.addNetworkFailedFetchRate(builder, networkFailedFetchRate);
    DataNodeMetrics.addNetworkFailedAppendRate(builder, networkFailedAppendRate);
    DataNodeMetrics.addNetworkFetchRate(builder, networkFetchRate);
    DataNodeMetrics.addNetworkAppendRate(builder, networkAppendRate);
    DataNodeMetrics.addUringTaskAvgLatency(builder, uringTaskAvgLatency);
    DataNodeMetrics.addUringInflightTaskCnt(builder, uringInflightTaskCnt);
    DataNodeMetrics.addUringTaskRate(builder, uringTaskRate);
    return DataNodeMetrics.endDataNodeMetrics(builder);
  }

  public static void startDataNodeMetrics(FlatBufferBuilder builder) { builder.startTable(17); }
  public static void addDiskInRate(FlatBufferBuilder builder, long diskInRate) { builder.addLong(0, diskInRate, 0L); }
  public static void addDiskOutRate(FlatBufferBuilder builder, long diskOutRate) { builder.addLong(1, diskOutRate, 0L); }
  public static void addDiskFreeSpace(FlatBufferBuilder builder, long diskFreeSpace) { builder.addLong(2, diskFreeSpace, 0L); }
  public static void addDiskUnindexedDataSize(FlatBufferBuilder builder, long diskUnindexedDataSize) { builder.addLong(3, diskUnindexedDataSize, 0L); }
  public static void addMemoryUsed(FlatBufferBuilder builder, long memoryUsed) { builder.addLong(4, memoryUsed, 0L); }
  public static void addUringTaskRate(FlatBufferBuilder builder, short uringTaskRate) { builder.addShort(5, uringTaskRate, 0); }
  public static void addUringInflightTaskCnt(FlatBufferBuilder builder, short uringInflightTaskCnt) { builder.addShort(6, uringInflightTaskCnt, 0); }
  public static void addUringPendingTaskCnt(FlatBufferBuilder builder, int uringPendingTaskCnt) { builder.addInt(7, uringPendingTaskCnt, 0); }
  public static void addUringTaskAvgLatency(FlatBufferBuilder builder, short uringTaskAvgLatency) { builder.addShort(8, uringTaskAvgLatency, 0); }
  public static void addNetworkAppendRate(FlatBufferBuilder builder, short networkAppendRate) { builder.addShort(9, networkAppendRate, 0); }
  public static void addNetworkFetchRate(FlatBufferBuilder builder, short networkFetchRate) { builder.addShort(10, networkFetchRate, 0); }
  public static void addNetworkFailedAppendRate(FlatBufferBuilder builder, short networkFailedAppendRate) { builder.addShort(11, networkFailedAppendRate, 0); }
  public static void addNetworkFailedFetchRate(FlatBufferBuilder builder, short networkFailedFetchRate) { builder.addShort(12, networkFailedFetchRate, 0); }
  public static void addNetworkAppendAvgLatency(FlatBufferBuilder builder, short networkAppendAvgLatency) { builder.addShort(13, networkAppendAvgLatency, 0); }
  public static void addNetworkFetchAvgLatency(FlatBufferBuilder builder, short networkFetchAvgLatency) { builder.addShort(14, networkFetchAvgLatency, 0); }
  public static void addRangeMissingReplicaCnt(FlatBufferBuilder builder, short rangeMissingReplicaCnt) { builder.addShort(15, rangeMissingReplicaCnt, 0); }
  public static void addRangeActiveCnt(FlatBufferBuilder builder, short rangeActiveCnt) { builder.addShort(16, rangeActiveCnt, 0); }
  public static int endDataNodeMetrics(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public DataNodeMetrics get(int j) { return get(new DataNodeMetrics(), j); }
    public DataNodeMetrics get(DataNodeMetrics obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public DataNodeMetricsT unpack() {
    DataNodeMetricsT _o = new DataNodeMetricsT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(DataNodeMetricsT _o) {
    long _oDiskInRate = diskInRate();
    _o.setDiskInRate(_oDiskInRate);
    long _oDiskOutRate = diskOutRate();
    _o.setDiskOutRate(_oDiskOutRate);
    long _oDiskFreeSpace = diskFreeSpace();
    _o.setDiskFreeSpace(_oDiskFreeSpace);
    long _oDiskUnindexedDataSize = diskUnindexedDataSize();
    _o.setDiskUnindexedDataSize(_oDiskUnindexedDataSize);
    long _oMemoryUsed = memoryUsed();
    _o.setMemoryUsed(_oMemoryUsed);
    short _oUringTaskRate = uringTaskRate();
    _o.setUringTaskRate(_oUringTaskRate);
    short _oUringInflightTaskCnt = uringInflightTaskCnt();
    _o.setUringInflightTaskCnt(_oUringInflightTaskCnt);
    int _oUringPendingTaskCnt = uringPendingTaskCnt();
    _o.setUringPendingTaskCnt(_oUringPendingTaskCnt);
    short _oUringTaskAvgLatency = uringTaskAvgLatency();
    _o.setUringTaskAvgLatency(_oUringTaskAvgLatency);
    short _oNetworkAppendRate = networkAppendRate();
    _o.setNetworkAppendRate(_oNetworkAppendRate);
    short _oNetworkFetchRate = networkFetchRate();
    _o.setNetworkFetchRate(_oNetworkFetchRate);
    short _oNetworkFailedAppendRate = networkFailedAppendRate();
    _o.setNetworkFailedAppendRate(_oNetworkFailedAppendRate);
    short _oNetworkFailedFetchRate = networkFailedFetchRate();
    _o.setNetworkFailedFetchRate(_oNetworkFailedFetchRate);
    short _oNetworkAppendAvgLatency = networkAppendAvgLatency();
    _o.setNetworkAppendAvgLatency(_oNetworkAppendAvgLatency);
    short _oNetworkFetchAvgLatency = networkFetchAvgLatency();
    _o.setNetworkFetchAvgLatency(_oNetworkFetchAvgLatency);
    short _oRangeMissingReplicaCnt = rangeMissingReplicaCnt();
    _o.setRangeMissingReplicaCnt(_oRangeMissingReplicaCnt);
    short _oRangeActiveCnt = rangeActiveCnt();
    _o.setRangeActiveCnt(_oRangeActiveCnt);
  }
  public static int pack(FlatBufferBuilder builder, DataNodeMetricsT _o) {
    if (_o == null) return 0;
    return createDataNodeMetrics(
      builder,
      _o.getDiskInRate(),
      _o.getDiskOutRate(),
      _o.getDiskFreeSpace(),
      _o.getDiskUnindexedDataSize(),
      _o.getMemoryUsed(),
      _o.getUringTaskRate(),
      _o.getUringInflightTaskCnt(),
      _o.getUringPendingTaskCnt(),
      _o.getUringTaskAvgLatency(),
      _o.getNetworkAppendRate(),
      _o.getNetworkFetchRate(),
      _o.getNetworkFailedAppendRate(),
      _o.getNetworkFailedFetchRate(),
      _o.getNetworkAppendAvgLatency(),
      _o.getNetworkFetchAvgLatency(),
      _o.getRangeMissingReplicaCnt(),
      _o.getRangeActiveCnt());
  }
}


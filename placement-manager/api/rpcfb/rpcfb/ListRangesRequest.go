// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListRangesRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	RangeCriteria []*RangeCriteriaT `json:"range_criteria"`
}

func (t *ListRangesRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeCriteriaOffset := flatbuffers.UOffsetT(0)
	if t.RangeCriteria != nil {
		rangeCriteriaLength := len(t.RangeCriteria)
		rangeCriteriaOffsets := make([]flatbuffers.UOffsetT, rangeCriteriaLength)
		for j := 0; j < rangeCriteriaLength; j++ {
			rangeCriteriaOffsets[j] = t.RangeCriteria[j].Pack(builder)
		}
		ListRangesRequestStartRangeCriteriaVector(builder, rangeCriteriaLength)
		for j := rangeCriteriaLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rangeCriteriaOffsets[j])
		}
		rangeCriteriaOffset = builder.EndVector(rangeCriteriaLength)
	}
	ListRangesRequestStart(builder)
	ListRangesRequestAddTimeoutMs(builder, t.TimeoutMs)
	ListRangesRequestAddRangeCriteria(builder, rangeCriteriaOffset)
	return ListRangesRequestEnd(builder)
}

func (rcv *ListRangesRequest) UnPackTo(t *ListRangesRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	rangeCriteriaLength := rcv.RangeCriteriaLength()
	t.RangeCriteria = make([]*RangeCriteriaT, rangeCriteriaLength)
	for j := 0; j < rangeCriteriaLength; j++ {
		x := RangeCriteria{}
		rcv.RangeCriteria(&x, j)
		t.RangeCriteria[j] = x.UnPack()
	}
}

func (rcv *ListRangesRequest) UnPack() *ListRangesRequestT {
	if rcv == nil { return nil }
	t := &ListRangesRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ListRangesRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsListRangesRequest(buf []byte, offset flatbuffers.UOffsetT) *ListRangesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListRangesRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsListRangesRequest(buf []byte, offset flatbuffers.UOffsetT) *ListRangesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListRangesRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ListRangesRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListRangesRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListRangesRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListRangesRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *ListRangesRequest) RangeCriteria(obj *RangeCriteria, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ListRangesRequest) RangeCriteriaLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func ListRangesRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ListRangesRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func ListRangesRequestAddRangeCriteria(builder *flatbuffers.Builder, rangeCriteria flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rangeCriteria), 0)
}
func ListRangesRequestStartRangeCriteriaVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListRangesRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

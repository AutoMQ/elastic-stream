// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DescribePlacementManagerClusterRequestT struct {
	DataNode *DataNodeT `json:"data_node"`
	TimeoutMs int32 `json:"timeout_ms"`
}

func (t *DescribePlacementManagerClusterRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataNodeOffset := t.DataNode.Pack(builder)
	DescribePlacementManagerClusterRequestStart(builder)
	DescribePlacementManagerClusterRequestAddDataNode(builder, dataNodeOffset)
	DescribePlacementManagerClusterRequestAddTimeoutMs(builder, t.TimeoutMs)
	return DescribePlacementManagerClusterRequestEnd(builder)
}

func (rcv *DescribePlacementManagerClusterRequest) UnPackTo(t *DescribePlacementManagerClusterRequestT) {
	t.DataNode = rcv.DataNode(nil).UnPack()
	t.TimeoutMs = rcv.TimeoutMs()
}

func (rcv *DescribePlacementManagerClusterRequest) UnPack() *DescribePlacementManagerClusterRequestT {
	if rcv == nil { return nil }
	t := &DescribePlacementManagerClusterRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DescribePlacementManagerClusterRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDescribePlacementManagerClusterRequest(buf []byte, offset flatbuffers.UOffsetT) *DescribePlacementManagerClusterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DescribePlacementManagerClusterRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDescribePlacementManagerClusterRequest(buf []byte, offset flatbuffers.UOffsetT) *DescribePlacementManagerClusterRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DescribePlacementManagerClusterRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DescribePlacementManagerClusterRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DescribePlacementManagerClusterRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DescribePlacementManagerClusterRequest) DataNode(obj *DataNode) *DataNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DataNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *DescribePlacementManagerClusterRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DescribePlacementManagerClusterRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func DescribePlacementManagerClusterRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DescribePlacementManagerClusterRequestAddDataNode(builder *flatbuffers.Builder, dataNode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dataNode), 0)
}
func DescribePlacementManagerClusterRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(1, timeoutMs, 0)
}
func DescribePlacementManagerClusterRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

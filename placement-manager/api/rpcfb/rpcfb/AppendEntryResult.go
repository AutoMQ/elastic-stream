// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type AppendEntryResultT struct {
	Status *StatusT `json:"status"`
	TimestampMs int64 `json:"timestamp_ms"`
}

func (t *AppendEntryResultT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	AppendEntryResultStart(builder)
	AppendEntryResultAddStatus(builder, statusOffset)
	AppendEntryResultAddTimestampMs(builder, t.TimestampMs)
	return AppendEntryResultEnd(builder)
}

func (rcv *AppendEntryResult) UnPackTo(t *AppendEntryResultT) {
	t.Status = rcv.Status(nil).UnPack()
	t.TimestampMs = rcv.TimestampMs()
}

func (rcv *AppendEntryResult) UnPack() *AppendEntryResultT {
	if rcv == nil { return nil }
	t := &AppendEntryResultT{}
	rcv.UnPackTo(t)
	return t
}

type AppendEntryResult struct {
	_tab flatbuffers.Table
}

func GetRootAsAppendEntryResult(buf []byte, offset flatbuffers.UOffsetT) *AppendEntryResult {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &AppendEntryResult{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsAppendEntryResult(buf []byte, offset flatbuffers.UOffsetT) *AppendEntryResult {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &AppendEntryResult{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *AppendEntryResult) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *AppendEntryResult) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *AppendEntryResult) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *AppendEntryResult) TimestampMs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *AppendEntryResult) MutateTimestampMs(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func AppendEntryResultStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func AppendEntryResultAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func AppendEntryResultAddTimestampMs(builder *flatbuffers.Builder, timestampMs int64) {
	builder.PrependInt64Slot(1, timestampMs, 0)
}
func AppendEntryResultEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PlacementManagerT struct {
	Nodes []*PlacementManagerNodeT `json:"nodes"`
}

func (t *PlacementManagerT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nodesOffset := flatbuffers.UOffsetT(0)
	if t.Nodes != nil {
		nodesLength := len(t.Nodes)
		nodesOffsets := make([]flatbuffers.UOffsetT, nodesLength)
		for j := 0; j < nodesLength; j++ {
			nodesOffsets[j] = t.Nodes[j].Pack(builder)
		}
		PlacementManagerStartNodesVector(builder, nodesLength)
		for j := nodesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(nodesOffsets[j])
		}
		nodesOffset = builder.EndVector(nodesLength)
	}
	PlacementManagerStart(builder)
	PlacementManagerAddNodes(builder, nodesOffset)
	return PlacementManagerEnd(builder)
}

func (rcv *PlacementManager) UnPackTo(t *PlacementManagerT) {
	nodesLength := rcv.NodesLength()
	t.Nodes = make([]*PlacementManagerNodeT, nodesLength)
	for j := 0; j < nodesLength; j++ {
		x := PlacementManagerNode{}
		rcv.Nodes(&x, j)
		t.Nodes[j] = x.UnPack()
	}
}

func (rcv *PlacementManager) UnPack() *PlacementManagerT {
	if rcv == nil { return nil }
	t := &PlacementManagerT{}
	rcv.UnPackTo(t)
	return t
}

type PlacementManager struct {
	_tab flatbuffers.Table
}

func GetRootAsPlacementManager(buf []byte, offset flatbuffers.UOffsetT) *PlacementManager {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PlacementManager{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPlacementManager(buf []byte, offset flatbuffers.UOffsetT) *PlacementManager {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PlacementManager{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PlacementManager) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PlacementManager) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PlacementManager) Nodes(obj *PlacementManagerNode, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *PlacementManager) NodesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func PlacementManagerStart(builder *flatbuffers.Builder) {
	builder.StartObject(1)
}
func PlacementManagerAddNodes(builder *flatbuffers.Builder, nodes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(nodes), 0)
}
func PlacementManagerStartNodesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func PlacementManagerEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

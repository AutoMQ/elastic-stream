// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SealRangeEntryT struct {
	Type SealType `json:"type"`
	Range *RangeIdT `json:"range"`
	End int64 `json:"end"`
	Renew bool `json:"renew"`
}

func (t *SealRangeEntryT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	range_Offset := t.Range.Pack(builder)
	SealRangeEntryStart(builder)
	SealRangeEntryAddType(builder, t.Type)
	SealRangeEntryAddRange(builder, range_Offset)
	SealRangeEntryAddEnd(builder, t.End)
	SealRangeEntryAddRenew(builder, t.Renew)
	return SealRangeEntryEnd(builder)
}

func (rcv *SealRangeEntry) UnPackTo(t *SealRangeEntryT) {
	t.Type = rcv.Type()
	t.Range = rcv.Range(nil).UnPack()
	t.End = rcv.End()
	t.Renew = rcv.Renew()
}

func (rcv *SealRangeEntry) UnPack() *SealRangeEntryT {
	if rcv == nil { return nil }
	t := &SealRangeEntryT{}
	rcv.UnPackTo(t)
	return t
}

type SealRangeEntry struct {
	_tab flatbuffers.Table
}

func GetRootAsSealRangeEntry(buf []byte, offset flatbuffers.UOffsetT) *SealRangeEntry {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SealRangeEntry{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSealRangeEntry(buf []byte, offset flatbuffers.UOffsetT) *SealRangeEntry {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SealRangeEntry{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SealRangeEntry) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SealRangeEntry) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SealRangeEntry) Type() SealType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return SealType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *SealRangeEntry) MutateType(n SealType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *SealRangeEntry) Range(obj *RangeId) *RangeId {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeId)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *SealRangeEntry) End() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *SealRangeEntry) MutateEnd(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *SealRangeEntry) Renew() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *SealRangeEntry) MutateRenew(n bool) bool {
	return rcv._tab.MutateBoolSlot(10, n)
}

func SealRangeEntryStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SealRangeEntryAddType(builder *flatbuffers.Builder, type_ SealType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func SealRangeEntryAddRange(builder *flatbuffers.Builder, range_ flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(range_), 0)
}
func SealRangeEntryAddEnd(builder *flatbuffers.Builder, end int64) {
	builder.PrependInt64Slot(2, end, -1)
}
func SealRangeEntryAddRenew(builder *flatbuffers.Builder, renew bool) {
	builder.PrependBoolSlot(3, renew, false)
}
func SealRangeEntryEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

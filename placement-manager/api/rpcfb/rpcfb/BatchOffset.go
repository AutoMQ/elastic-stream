// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type BatchOffsetT struct {
	Offset int64 `json:"offset"`
	Len int32 `json:"len"`
}

func (t *BatchOffsetT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	BatchOffsetStart(builder)
	BatchOffsetAddOffset(builder, t.Offset)
	BatchOffsetAddLen(builder, t.Len)
	return BatchOffsetEnd(builder)
}

func (rcv *BatchOffset) UnPackTo(t *BatchOffsetT) {
	t.Offset = rcv.Offset()
	t.Len = rcv.Len()
}

func (rcv *BatchOffset) UnPack() *BatchOffsetT {
	if rcv == nil { return nil }
	t := &BatchOffsetT{}
	rcv.UnPackTo(t)
	return t
}

type BatchOffset struct {
	_tab flatbuffers.Table
}

func GetRootAsBatchOffset(buf []byte, offset flatbuffers.UOffsetT) *BatchOffset {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &BatchOffset{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsBatchOffset(buf []byte, offset flatbuffers.UOffsetT) *BatchOffset {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &BatchOffset{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *BatchOffset) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *BatchOffset) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *BatchOffset) Offset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BatchOffset) MutateOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *BatchOffset) Len() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *BatchOffset) MutateLen(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func BatchOffsetStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func BatchOffsetAddOffset(builder *flatbuffers.Builder, offset int64) {
	builder.PrependInt64Slot(0, offset, 0)
}
func BatchOffsetAddLen(builder *flatbuffers.Builder, len int32) {
	builder.PrependInt32Slot(1, len, 0)
}
func BatchOffsetEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ReportMetricsRequestT struct {
	DataNode *DataNodeT `json:"data_node"`
	Metrics *DataNodeMetricsT `json:"metrics"`
}

func (t *ReportMetricsRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	dataNodeOffset := t.DataNode.Pack(builder)
	metricsOffset := t.Metrics.Pack(builder)
	ReportMetricsRequestStart(builder)
	ReportMetricsRequestAddDataNode(builder, dataNodeOffset)
	ReportMetricsRequestAddMetrics(builder, metricsOffset)
	return ReportMetricsRequestEnd(builder)
}

func (rcv *ReportMetricsRequest) UnPackTo(t *ReportMetricsRequestT) {
	t.DataNode = rcv.DataNode(nil).UnPack()
	t.Metrics = rcv.Metrics(nil).UnPack()
}

func (rcv *ReportMetricsRequest) UnPack() *ReportMetricsRequestT {
	if rcv == nil { return nil }
	t := &ReportMetricsRequestT{}
	rcv.UnPackTo(t)
	return t
}

type ReportMetricsRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsReportMetricsRequest(buf []byte, offset flatbuffers.UOffsetT) *ReportMetricsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ReportMetricsRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsReportMetricsRequest(buf []byte, offset flatbuffers.UOffsetT) *ReportMetricsRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ReportMetricsRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ReportMetricsRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ReportMetricsRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ReportMetricsRequest) DataNode(obj *DataNode) *DataNode {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DataNode)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ReportMetricsRequest) Metrics(obj *DataNodeMetrics) *DataNodeMetrics {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DataNodeMetrics)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ReportMetricsRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ReportMetricsRequestAddDataNode(builder *flatbuffers.Builder, dataNode flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(dataNode), 0)
}
func ReportMetricsRequestAddMetrics(builder *flatbuffers.Builder, metrics flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(metrics), 0)
}
func ReportMetricsRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

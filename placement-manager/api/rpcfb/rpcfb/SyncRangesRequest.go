// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type SyncRangesRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	StreamRanges []*StreamRangesT `json:"stream_ranges"`
}

func (t *SyncRangesRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	streamRangesOffset := flatbuffers.UOffsetT(0)
	if t.StreamRanges != nil {
		streamRangesLength := len(t.StreamRanges)
		streamRangesOffsets := make([]flatbuffers.UOffsetT, streamRangesLength)
		for j := 0; j < streamRangesLength; j++ {
			streamRangesOffsets[j] = t.StreamRanges[j].Pack(builder)
		}
		SyncRangesRequestStartStreamRangesVector(builder, streamRangesLength)
		for j := streamRangesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(streamRangesOffsets[j])
		}
		streamRangesOffset = builder.EndVector(streamRangesLength)
	}
	SyncRangesRequestStart(builder)
	SyncRangesRequestAddTimeoutMs(builder, t.TimeoutMs)
	SyncRangesRequestAddStreamRanges(builder, streamRangesOffset)
	return SyncRangesRequestEnd(builder)
}

func (rcv *SyncRangesRequest) UnPackTo(t *SyncRangesRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	streamRangesLength := rcv.StreamRangesLength()
	t.StreamRanges = make([]*StreamRangesT, streamRangesLength)
	for j := 0; j < streamRangesLength; j++ {
		x := StreamRanges{}
		rcv.StreamRanges(&x, j)
		t.StreamRanges[j] = x.UnPack()
	}
}

func (rcv *SyncRangesRequest) UnPack() *SyncRangesRequestT {
	if rcv == nil { return nil }
	t := &SyncRangesRequestT{}
	rcv.UnPackTo(t)
	return t
}

type SyncRangesRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsSyncRangesRequest(buf []byte, offset flatbuffers.UOffsetT) *SyncRangesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SyncRangesRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsSyncRangesRequest(buf []byte, offset flatbuffers.UOffsetT) *SyncRangesRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &SyncRangesRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *SyncRangesRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SyncRangesRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SyncRangesRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SyncRangesRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *SyncRangesRequest) StreamRanges(obj *StreamRanges, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SyncRangesRequest) StreamRangesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func SyncRangesRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func SyncRangesRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func SyncRangesRequestAddStreamRanges(builder *flatbuffers.Builder, streamRanges flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(streamRanges), 0)
}
func SyncRangesRequestStartStreamRangesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SyncRangesRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

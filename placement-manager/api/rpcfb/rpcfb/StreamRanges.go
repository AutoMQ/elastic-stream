// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type StreamRangesT struct {
	StreamId int64 `json:"stream_id"`
	Ranges []*RangeT `json:"ranges"`
}

func (t *StreamRangesT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangesOffset := flatbuffers.UOffsetT(0)
	if t.Ranges != nil {
		rangesLength := len(t.Ranges)
		rangesOffsets := make([]flatbuffers.UOffsetT, rangesLength)
		for j := 0; j < rangesLength; j++ {
			rangesOffsets[j] = t.Ranges[j].Pack(builder)
		}
		StreamRangesStartRangesVector(builder, rangesLength)
		for j := rangesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(rangesOffsets[j])
		}
		rangesOffset = builder.EndVector(rangesLength)
	}
	StreamRangesStart(builder)
	StreamRangesAddStreamId(builder, t.StreamId)
	StreamRangesAddRanges(builder, rangesOffset)
	return StreamRangesEnd(builder)
}

func (rcv *StreamRanges) UnPackTo(t *StreamRangesT) {
	t.StreamId = rcv.StreamId()
	rangesLength := rcv.RangesLength()
	t.Ranges = make([]*RangeT, rangesLength)
	for j := 0; j < rangesLength; j++ {
		x := Range{}
		rcv.Ranges(&x, j)
		t.Ranges[j] = x.UnPack()
	}
}

func (rcv *StreamRanges) UnPack() *StreamRangesT {
	if rcv == nil { return nil }
	t := &StreamRangesT{}
	rcv.UnPackTo(t)
	return t
}

type StreamRanges struct {
	_tab flatbuffers.Table
}

func GetRootAsStreamRanges(buf []byte, offset flatbuffers.UOffsetT) *StreamRanges {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &StreamRanges{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsStreamRanges(buf []byte, offset flatbuffers.UOffsetT) *StreamRanges {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &StreamRanges{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *StreamRanges) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *StreamRanges) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *StreamRanges) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *StreamRanges) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *StreamRanges) Ranges(obj *Range, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *StreamRanges) RangesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func StreamRangesStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func StreamRangesAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, -1)
}
func StreamRangesAddRanges(builder *flatbuffers.Builder, ranges flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(ranges), 0)
}
func StreamRangesStartRangesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func StreamRangesEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

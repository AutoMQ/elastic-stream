// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type FetchRequestT struct {
	MaxWaitMs int32 `json:"max_wait_ms"`
	MinBytes int32 `json:"min_bytes"`
	FetchRequests []*FetchInfoT `json:"fetch_requests"`
}

func (t *FetchRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	fetchRequestsOffset := flatbuffers.UOffsetT(0)
	if t.FetchRequests != nil {
		fetchRequestsLength := len(t.FetchRequests)
		fetchRequestsOffsets := make([]flatbuffers.UOffsetT, fetchRequestsLength)
		for j := 0; j < fetchRequestsLength; j++ {
			fetchRequestsOffsets[j] = t.FetchRequests[j].Pack(builder)
		}
		FetchRequestStartFetchRequestsVector(builder, fetchRequestsLength)
		for j := fetchRequestsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(fetchRequestsOffsets[j])
		}
		fetchRequestsOffset = builder.EndVector(fetchRequestsLength)
	}
	FetchRequestStart(builder)
	FetchRequestAddMaxWaitMs(builder, t.MaxWaitMs)
	FetchRequestAddMinBytes(builder, t.MinBytes)
	FetchRequestAddFetchRequests(builder, fetchRequestsOffset)
	return FetchRequestEnd(builder)
}

func (rcv *FetchRequest) UnPackTo(t *FetchRequestT) {
	t.MaxWaitMs = rcv.MaxWaitMs()
	t.MinBytes = rcv.MinBytes()
	fetchRequestsLength := rcv.FetchRequestsLength()
	t.FetchRequests = make([]*FetchInfoT, fetchRequestsLength)
	for j := 0; j < fetchRequestsLength; j++ {
		x := FetchInfo{}
		rcv.FetchRequests(&x, j)
		t.FetchRequests[j] = x.UnPack()
	}
}

func (rcv *FetchRequest) UnPack() *FetchRequestT {
	if rcv == nil { return nil }
	t := &FetchRequestT{}
	rcv.UnPackTo(t)
	return t
}

type FetchRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsFetchRequest(buf []byte, offset flatbuffers.UOffsetT) *FetchRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &FetchRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsFetchRequest(buf []byte, offset flatbuffers.UOffsetT) *FetchRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &FetchRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *FetchRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *FetchRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *FetchRequest) MaxWaitMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchRequest) MutateMaxWaitMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *FetchRequest) MinBytes() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *FetchRequest) MutateMinBytes(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *FetchRequest) FetchRequests(obj *FetchInfo, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *FetchRequest) FetchRequestsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func FetchRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func FetchRequestAddMaxWaitMs(builder *flatbuffers.Builder, maxWaitMs int32) {
	builder.PrependInt32Slot(0, maxWaitMs, 0)
}
func FetchRequestAddMinBytes(builder *flatbuffers.Builder, minBytes int32) {
	builder.PrependInt32Slot(1, minBytes, 0)
}
func FetchRequestAddFetchRequests(builder *flatbuffers.Builder, fetchRequests flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(fetchRequests), 0)
}
func FetchRequestStartFetchRequestsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func FetchRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

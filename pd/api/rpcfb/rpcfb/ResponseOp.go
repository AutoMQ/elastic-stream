// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResponseOpT struct {
	Type ResponseOpType `json:"type"`
	RangeResponse *RangeResponseT `json:"range_response"`
	PutResponse *PutResponseT `json:"put_response"`
	DeleteRangeResponse *DeleteRangeResponseT `json:"delete_range_response"`
	TxnResponse *TxnResponseT `json:"txn_response"`
}

func (t *ResponseOpT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	rangeResponseOffset := t.RangeResponse.Pack(builder)
	putResponseOffset := t.PutResponse.Pack(builder)
	deleteRangeResponseOffset := t.DeleteRangeResponse.Pack(builder)
	txnResponseOffset := t.TxnResponse.Pack(builder)
	ResponseOpStart(builder)
	ResponseOpAddType(builder, t.Type)
	ResponseOpAddRangeResponse(builder, rangeResponseOffset)
	ResponseOpAddPutResponse(builder, putResponseOffset)
	ResponseOpAddDeleteRangeResponse(builder, deleteRangeResponseOffset)
	ResponseOpAddTxnResponse(builder, txnResponseOffset)
	return ResponseOpEnd(builder)
}

func (rcv *ResponseOp) UnPackTo(t *ResponseOpT) {
	t.Type = rcv.Type()
	t.RangeResponse = rcv.RangeResponse(nil).UnPack()
	t.PutResponse = rcv.PutResponse(nil).UnPack()
	t.DeleteRangeResponse = rcv.DeleteRangeResponse(nil).UnPack()
	t.TxnResponse = rcv.TxnResponse(nil).UnPack()
}

func (rcv *ResponseOp) UnPack() *ResponseOpT {
	if rcv == nil { return nil }
	t := &ResponseOpT{}
	rcv.UnPackTo(t)
	return t
}

type ResponseOp struct {
	_tab flatbuffers.Table
}

func GetRootAsResponseOp(buf []byte, offset flatbuffers.UOffsetT) *ResponseOp {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResponseOp{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsResponseOp(buf []byte, offset flatbuffers.UOffsetT) *ResponseOp {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ResponseOp{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ResponseOp) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResponseOp) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ResponseOp) Type() ResponseOpType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return ResponseOpType(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ResponseOp) MutateType(n ResponseOpType) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *ResponseOp) RangeResponse(obj *RangeResponse) *RangeResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(RangeResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ResponseOp) PutResponse(obj *PutResponse) *PutResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(PutResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ResponseOp) DeleteRangeResponse(obj *DeleteRangeResponse) *DeleteRangeResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(DeleteRangeResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ResponseOp) TxnResponse(obj *TxnResponse) *TxnResponse {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(TxnResponse)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ResponseOpStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ResponseOpAddType(builder *flatbuffers.Builder, type_ ResponseOpType) {
	builder.PrependByteSlot(0, byte(type_), 0)
}
func ResponseOpAddRangeResponse(builder *flatbuffers.Builder, rangeResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(rangeResponse), 0)
}
func ResponseOpAddPutResponse(builder *flatbuffers.Builder, putResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(putResponse), 0)
}
func ResponseOpAddDeleteRangeResponse(builder *flatbuffers.Builder, deleteRangeResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(deleteRangeResponse), 0)
}
func ResponseOpAddTxnResponse(builder *flatbuffers.Builder, txnResponse flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(txnResponse), 0)
}
func ResponseOpEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

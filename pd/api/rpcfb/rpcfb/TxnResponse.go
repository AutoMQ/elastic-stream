// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TxnResponseT struct {
	Status *StatusT `json:"status"`
	Succeeded bool `json:"succeeded"`
	Responses []*ResponseOpT `json:"responses"`
}

func (t *TxnResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	responsesOffset := flatbuffers.UOffsetT(0)
	if t.Responses != nil {
		responsesLength := len(t.Responses)
		responsesOffsets := make([]flatbuffers.UOffsetT, responsesLength)
		for j := 0; j < responsesLength; j++ {
			responsesOffsets[j] = t.Responses[j].Pack(builder)
		}
		TxnResponseStartResponsesVector(builder, responsesLength)
		for j := responsesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(responsesOffsets[j])
		}
		responsesOffset = builder.EndVector(responsesLength)
	}
	TxnResponseStart(builder)
	TxnResponseAddStatus(builder, statusOffset)
	TxnResponseAddSucceeded(builder, t.Succeeded)
	TxnResponseAddResponses(builder, responsesOffset)
	return TxnResponseEnd(builder)
}

func (rcv *TxnResponse) UnPackTo(t *TxnResponseT) {
	t.Status = rcv.Status(nil).UnPack()
	t.Succeeded = rcv.Succeeded()
	responsesLength := rcv.ResponsesLength()
	t.Responses = make([]*ResponseOpT, responsesLength)
	for j := 0; j < responsesLength; j++ {
		x := ResponseOp{}
		rcv.Responses(&x, j)
		t.Responses[j] = x.UnPack()
	}
}

func (rcv *TxnResponse) UnPack() *TxnResponseT {
	if rcv == nil { return nil }
	t := &TxnResponseT{}
	rcv.UnPackTo(t)
	return t
}

type TxnResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsTxnResponse(buf []byte, offset flatbuffers.UOffsetT) *TxnResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TxnResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTxnResponse(buf []byte, offset flatbuffers.UOffsetT) *TxnResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TxnResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TxnResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TxnResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TxnResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *TxnResponse) Succeeded() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *TxnResponse) MutateSucceeded(n bool) bool {
	return rcv._tab.MutateBoolSlot(6, n)
}

func (rcv *TxnResponse) Responses(obj *ResponseOp, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TxnResponse) ResponsesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TxnResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func TxnResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func TxnResponseAddSucceeded(builder *flatbuffers.Builder, succeeded bool) {
	builder.PrependBoolSlot(1, succeeded, false)
}
func TxnResponseAddResponses(builder *flatbuffers.Builder, responses flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(responses), 0)
}
func TxnResponseStartResponsesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxnResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

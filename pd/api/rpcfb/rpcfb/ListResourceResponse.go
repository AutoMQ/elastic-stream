// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ListResourceResponseT struct {
	Status *StatusT `json:"status"`
	ThrottleTimeMs int32 `json:"throttle_time_ms"`
	Resources []*ResourceT `json:"resources"`
	ResourceVersion int64 `json:"resource_version"`
	Continuation []byte `json:"continuation"`
}

func (t *ListResourceResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	resourcesOffset := flatbuffers.UOffsetT(0)
	if t.Resources != nil {
		resourcesLength := len(t.Resources)
		resourcesOffsets := make([]flatbuffers.UOffsetT, resourcesLength)
		for j := 0; j < resourcesLength; j++ {
			resourcesOffsets[j] = t.Resources[j].Pack(builder)
		}
		ListResourceResponseStartResourcesVector(builder, resourcesLength)
		for j := resourcesLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(resourcesOffsets[j])
		}
		resourcesOffset = builder.EndVector(resourcesLength)
	}
	continuationOffset := flatbuffers.UOffsetT(0)
	if t.Continuation != nil {
		continuationOffset = builder.CreateByteString(t.Continuation)
	}
	ListResourceResponseStart(builder)
	ListResourceResponseAddStatus(builder, statusOffset)
	ListResourceResponseAddThrottleTimeMs(builder, t.ThrottleTimeMs)
	ListResourceResponseAddResources(builder, resourcesOffset)
	ListResourceResponseAddResourceVersion(builder, t.ResourceVersion)
	ListResourceResponseAddContinuation(builder, continuationOffset)
	return ListResourceResponseEnd(builder)
}

func (rcv *ListResourceResponse) UnPackTo(t *ListResourceResponseT) {
	t.Status = rcv.Status(nil).UnPack()
	t.ThrottleTimeMs = rcv.ThrottleTimeMs()
	resourcesLength := rcv.ResourcesLength()
	t.Resources = make([]*ResourceT, resourcesLength)
	for j := 0; j < resourcesLength; j++ {
		x := Resource{}
		rcv.Resources(&x, j)
		t.Resources[j] = x.UnPack()
	}
	t.ResourceVersion = rcv.ResourceVersion()
	t.Continuation = rcv.ContinuationBytes()
}

func (rcv *ListResourceResponse) UnPack() *ListResourceResponseT {
	if rcv == nil { return nil }
	t := &ListResourceResponseT{}
	rcv.UnPackTo(t)
	return t
}

type ListResourceResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsListResourceResponse(buf []byte, offset flatbuffers.UOffsetT) *ListResourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ListResourceResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsListResourceResponse(buf []byte, offset flatbuffers.UOffsetT) *ListResourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ListResourceResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ListResourceResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ListResourceResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ListResourceResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *ListResourceResponse) ThrottleTimeMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListResourceResponse) MutateThrottleTimeMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *ListResourceResponse) Resources(obj *Resource, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *ListResourceResponse) ResourcesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ListResourceResponse) ResourceVersion() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *ListResourceResponse) MutateResourceVersion(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *ListResourceResponse) Continuation(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ListResourceResponse) ContinuationLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ListResourceResponse) ContinuationBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ListResourceResponse) MutateContinuation(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ListResourceResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func ListResourceResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func ListResourceResponseAddThrottleTimeMs(builder *flatbuffers.Builder, throttleTimeMs int32) {
	builder.PrependInt32Slot(1, throttleTimeMs, 0)
}
func ListResourceResponseAddResources(builder *flatbuffers.Builder, resources flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(resources), 0)
}
func ListResourceResponseStartResourcesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func ListResourceResponseAddResourceVersion(builder *flatbuffers.Builder, resourceVersion int64) {
	builder.PrependInt64Slot(3, resourceVersion, 0)
}
func ListResourceResponseAddContinuation(builder *flatbuffers.Builder, continuation flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(continuation), 0)
}
func ListResourceResponseStartContinuationVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ListResourceResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

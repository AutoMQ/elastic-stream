// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjectT struct {
	StreamId int64 `json:"stream_id"`
	RangeIndex int32 `json:"range_index"`
	Epoch int64 `json:"epoch"`
	StartOffset int64 `json:"start_offset"`
	EndOffsetDelta int32 `json:"end_offset_delta"`
	DataLen int32 `json:"data_len"`
	SparseIndex []byte `json:"sparse_index"`
}

func (t *ObjectT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	sparseIndexOffset := flatbuffers.UOffsetT(0)
	if t.SparseIndex != nil {
		sparseIndexOffset = builder.CreateByteString(t.SparseIndex)
	}
	ObjectStart(builder)
	ObjectAddStreamId(builder, t.StreamId)
	ObjectAddRangeIndex(builder, t.RangeIndex)
	ObjectAddEpoch(builder, t.Epoch)
	ObjectAddStartOffset(builder, t.StartOffset)
	ObjectAddEndOffsetDelta(builder, t.EndOffsetDelta)
	ObjectAddDataLen(builder, t.DataLen)
	ObjectAddSparseIndex(builder, sparseIndexOffset)
	return ObjectEnd(builder)
}

func (rcv *Object) UnPackTo(t *ObjectT) {
	t.StreamId = rcv.StreamId()
	t.RangeIndex = rcv.RangeIndex()
	t.Epoch = rcv.Epoch()
	t.StartOffset = rcv.StartOffset()
	t.EndOffsetDelta = rcv.EndOffsetDelta()
	t.DataLen = rcv.DataLen()
	t.SparseIndex = rcv.SparseIndexBytes()
}

func (rcv *Object) UnPack() *ObjectT {
	if rcv == nil { return nil }
	t := &ObjectT{}
	rcv.UnPackTo(t)
	return t
}

type Object struct {
	_tab flatbuffers.Table
}

func GetRootAsObject(buf []byte, offset flatbuffers.UOffsetT) *Object {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Object{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObject(buf []byte, offset flatbuffers.UOffsetT) *Object {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Object{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Object) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Object) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Object) StreamId() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateStreamId(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *Object) RangeIndex() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateRangeIndex(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *Object) Epoch() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateEpoch(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *Object) StartOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateStartOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func (rcv *Object) EndOffsetDelta() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateEndOffsetDelta(n int32) bool {
	return rcv._tab.MutateInt32Slot(12, n)
}

func (rcv *Object) DataLen() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *Object) MutateDataLen(n int32) bool {
	return rcv._tab.MutateInt32Slot(14, n)
}

func (rcv *Object) SparseIndex(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Object) SparseIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Object) SparseIndexBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Object) MutateSparseIndex(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ObjectStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func ObjectAddStreamId(builder *flatbuffers.Builder, streamId int64) {
	builder.PrependInt64Slot(0, streamId, -1)
}
func ObjectAddRangeIndex(builder *flatbuffers.Builder, rangeIndex int32) {
	builder.PrependInt32Slot(1, rangeIndex, -1)
}
func ObjectAddEpoch(builder *flatbuffers.Builder, epoch int64) {
	builder.PrependInt64Slot(2, epoch, -1)
}
func ObjectAddStartOffset(builder *flatbuffers.Builder, startOffset int64) {
	builder.PrependInt64Slot(3, startOffset, -1)
}
func ObjectAddEndOffsetDelta(builder *flatbuffers.Builder, endOffsetDelta int32) {
	builder.PrependInt32Slot(4, endOffsetDelta, -1)
}
func ObjectAddDataLen(builder *flatbuffers.Builder, dataLen int32) {
	builder.PrependInt32Slot(5, dataLen, -1)
}
func ObjectAddSparseIndex(builder *flatbuffers.Builder, sparseIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(6, flatbuffers.UOffsetT(sparseIndex), 0)
}
func ObjectStartSparseIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ObjectEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

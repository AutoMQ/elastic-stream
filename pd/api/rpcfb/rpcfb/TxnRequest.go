// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type TxnRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	Compare []*CompareT `json:"compare"`
	Success []*RequestOpT `json:"success"`
	Failure []*RequestOpT `json:"failure"`
}

func (t *TxnRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	compareOffset := flatbuffers.UOffsetT(0)
	if t.Compare != nil {
		compareLength := len(t.Compare)
		compareOffsets := make([]flatbuffers.UOffsetT, compareLength)
		for j := 0; j < compareLength; j++ {
			compareOffsets[j] = t.Compare[j].Pack(builder)
		}
		TxnRequestStartCompareVector(builder, compareLength)
		for j := compareLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(compareOffsets[j])
		}
		compareOffset = builder.EndVector(compareLength)
	}
	successOffset := flatbuffers.UOffsetT(0)
	if t.Success != nil {
		successLength := len(t.Success)
		successOffsets := make([]flatbuffers.UOffsetT, successLength)
		for j := 0; j < successLength; j++ {
			successOffsets[j] = t.Success[j].Pack(builder)
		}
		TxnRequestStartSuccessVector(builder, successLength)
		for j := successLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(successOffsets[j])
		}
		successOffset = builder.EndVector(successLength)
	}
	failureOffset := flatbuffers.UOffsetT(0)
	if t.Failure != nil {
		failureLength := len(t.Failure)
		failureOffsets := make([]flatbuffers.UOffsetT, failureLength)
		for j := 0; j < failureLength; j++ {
			failureOffsets[j] = t.Failure[j].Pack(builder)
		}
		TxnRequestStartFailureVector(builder, failureLength)
		for j := failureLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(failureOffsets[j])
		}
		failureOffset = builder.EndVector(failureLength)
	}
	TxnRequestStart(builder)
	TxnRequestAddTimeoutMs(builder, t.TimeoutMs)
	TxnRequestAddCompare(builder, compareOffset)
	TxnRequestAddSuccess(builder, successOffset)
	TxnRequestAddFailure(builder, failureOffset)
	return TxnRequestEnd(builder)
}

func (rcv *TxnRequest) UnPackTo(t *TxnRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	compareLength := rcv.CompareLength()
	t.Compare = make([]*CompareT, compareLength)
	for j := 0; j < compareLength; j++ {
		x := Compare{}
		rcv.Compare(&x, j)
		t.Compare[j] = x.UnPack()
	}
	successLength := rcv.SuccessLength()
	t.Success = make([]*RequestOpT, successLength)
	for j := 0; j < successLength; j++ {
		x := RequestOp{}
		rcv.Success(&x, j)
		t.Success[j] = x.UnPack()
	}
	failureLength := rcv.FailureLength()
	t.Failure = make([]*RequestOpT, failureLength)
	for j := 0; j < failureLength; j++ {
		x := RequestOp{}
		rcv.Failure(&x, j)
		t.Failure[j] = x.UnPack()
	}
}

func (rcv *TxnRequest) UnPack() *TxnRequestT {
	if rcv == nil { return nil }
	t := &TxnRequestT{}
	rcv.UnPackTo(t)
	return t
}

type TxnRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsTxnRequest(buf []byte, offset flatbuffers.UOffsetT) *TxnRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &TxnRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsTxnRequest(buf []byte, offset flatbuffers.UOffsetT) *TxnRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &TxnRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *TxnRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *TxnRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *TxnRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *TxnRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *TxnRequest) Compare(obj *Compare, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TxnRequest) CompareLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TxnRequest) Success(obj *RequestOp, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TxnRequest) SuccessLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *TxnRequest) Failure(obj *RequestOp, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *TxnRequest) FailureLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func TxnRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func TxnRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func TxnRequestAddCompare(builder *flatbuffers.Builder, compare flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(compare), 0)
}
func TxnRequestStartCompareVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxnRequestAddSuccess(builder *flatbuffers.Builder, success flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(success), 0)
}
func TxnRequestStartSuccessVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxnRequestAddFailure(builder *flatbuffers.Builder, failure flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(failure), 0)
}
func TxnRequestStartFailureVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func TxnRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WatchResourceRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	ResourceType ResourceType `json:"resource_type"`
	ResourceVersion int64 `json:"resource_version"`
}

func (t *WatchResourceRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	WatchResourceRequestStart(builder)
	WatchResourceRequestAddTimeoutMs(builder, t.TimeoutMs)
	WatchResourceRequestAddResourceType(builder, t.ResourceType)
	WatchResourceRequestAddResourceVersion(builder, t.ResourceVersion)
	return WatchResourceRequestEnd(builder)
}

func (rcv *WatchResourceRequest) UnPackTo(t *WatchResourceRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.ResourceType = rcv.ResourceType()
	t.ResourceVersion = rcv.ResourceVersion()
}

func (rcv *WatchResourceRequest) UnPack() *WatchResourceRequestT {
	if rcv == nil { return nil }
	t := &WatchResourceRequestT{}
	rcv.UnPackTo(t)
	return t
}

type WatchResourceRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsWatchResourceRequest(buf []byte, offset flatbuffers.UOffsetT) *WatchResourceRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WatchResourceRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWatchResourceRequest(buf []byte, offset flatbuffers.UOffsetT) *WatchResourceRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WatchResourceRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WatchResourceRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WatchResourceRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WatchResourceRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WatchResourceRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *WatchResourceRequest) ResourceType() ResourceType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return ResourceType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *WatchResourceRequest) MutateResourceType(n ResourceType) bool {
	return rcv._tab.MutateInt8Slot(6, int8(n))
}

func (rcv *WatchResourceRequest) ResourceVersion() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WatchResourceRequest) MutateResourceVersion(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func WatchResourceRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func WatchResourceRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func WatchResourceRequestAddResourceType(builder *flatbuffers.Builder, resourceType ResourceType) {
	builder.PrependInt8Slot(1, int8(resourceType), 0)
}
func WatchResourceRequestAddResourceVersion(builder *flatbuffers.Builder, resourceVersion int64) {
	builder.PrependInt64Slot(2, resourceVersion, 0)
}
func WatchResourceRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

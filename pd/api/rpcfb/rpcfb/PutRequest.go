// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type PutRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	Key []byte `json:"key"`
	Value []byte `json:"value"`
}

func (t *PutRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != nil {
		keyOffset = builder.CreateByteString(t.Key)
	}
	valueOffset := flatbuffers.UOffsetT(0)
	if t.Value != nil {
		valueOffset = builder.CreateByteString(t.Value)
	}
	PutRequestStart(builder)
	PutRequestAddTimeoutMs(builder, t.TimeoutMs)
	PutRequestAddKey(builder, keyOffset)
	PutRequestAddValue(builder, valueOffset)
	return PutRequestEnd(builder)
}

func (rcv *PutRequest) UnPackTo(t *PutRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.Key = rcv.KeyBytes()
	t.Value = rcv.ValueBytes()
}

func (rcv *PutRequest) UnPack() *PutRequestT {
	if rcv == nil { return nil }
	t := &PutRequestT{}
	rcv.UnPackTo(t)
	return t
}

type PutRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsPutRequest(buf []byte, offset flatbuffers.UOffsetT) *PutRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &PutRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsPutRequest(buf []byte, offset flatbuffers.UOffsetT) *PutRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &PutRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *PutRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *PutRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *PutRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *PutRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *PutRequest) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PutRequest) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PutRequest) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PutRequest) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *PutRequest) Value(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *PutRequest) ValueLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *PutRequest) ValueBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *PutRequest) MutateValue(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func PutRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func PutRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func PutRequestAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(key), 0)
}
func PutRequestStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PutRequestAddValue(builder *flatbuffers.Builder, value flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(value), 0)
}
func PutRequestStartValueVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func PutRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

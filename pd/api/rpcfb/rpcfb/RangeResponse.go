// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type RangeResponseT struct {
	Status *StatusT `json:"status"`
	Kvs []*KeyValueT `json:"kvs"`
	More bool `json:"more"`
	Count int64 `json:"count"`
}

func (t *RangeResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	kvsOffset := flatbuffers.UOffsetT(0)
	if t.Kvs != nil {
		kvsLength := len(t.Kvs)
		kvsOffsets := make([]flatbuffers.UOffsetT, kvsLength)
		for j := 0; j < kvsLength; j++ {
			kvsOffsets[j] = t.Kvs[j].Pack(builder)
		}
		RangeResponseStartKvsVector(builder, kvsLength)
		for j := kvsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(kvsOffsets[j])
		}
		kvsOffset = builder.EndVector(kvsLength)
	}
	RangeResponseStart(builder)
	RangeResponseAddStatus(builder, statusOffset)
	RangeResponseAddKvs(builder, kvsOffset)
	RangeResponseAddMore(builder, t.More)
	RangeResponseAddCount(builder, t.Count)
	return RangeResponseEnd(builder)
}

func (rcv *RangeResponse) UnPackTo(t *RangeResponseT) {
	t.Status = rcv.Status(nil).UnPack()
	kvsLength := rcv.KvsLength()
	t.Kvs = make([]*KeyValueT, kvsLength)
	for j := 0; j < kvsLength; j++ {
		x := KeyValue{}
		rcv.Kvs(&x, j)
		t.Kvs[j] = x.UnPack()
	}
	t.More = rcv.More()
	t.Count = rcv.Count()
}

func (rcv *RangeResponse) UnPack() *RangeResponseT {
	if rcv == nil { return nil }
	t := &RangeResponseT{}
	rcv.UnPackTo(t)
	return t
}

type RangeResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsRangeResponse(buf []byte, offset flatbuffers.UOffsetT) *RangeResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &RangeResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsRangeResponse(buf []byte, offset flatbuffers.UOffsetT) *RangeResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &RangeResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *RangeResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *RangeResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *RangeResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *RangeResponse) Kvs(obj *KeyValue, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *RangeResponse) KvsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *RangeResponse) More() bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetBool(o + rcv._tab.Pos)
	}
	return false
}

func (rcv *RangeResponse) MutateMore(n bool) bool {
	return rcv._tab.MutateBoolSlot(8, n)
}

func (rcv *RangeResponse) Count() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *RangeResponse) MutateCount(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func RangeResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func RangeResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func RangeResponseAddKvs(builder *flatbuffers.Builder, kvs flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(kvs), 0)
}
func RangeResponseStartKvsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func RangeResponseAddMore(builder *flatbuffers.Builder, more bool) {
	builder.PrependBoolSlot(2, more, false)
}
func RangeResponseAddCount(builder *flatbuffers.Builder, count int64) {
	builder.PrependInt64Slot(3, count, 0)
}
func RangeResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WatchResourceResponseT struct {
	Status *StatusT `json:"status"`
	ThrottleTimeMs int32 `json:"throttle_time_ms"`
	Events []*ResourceEventT `json:"events"`
	ResourceVersion int64 `json:"resource_version"`
}

func (t *WatchResourceResponseT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	statusOffset := t.Status.Pack(builder)
	eventsOffset := flatbuffers.UOffsetT(0)
	if t.Events != nil {
		eventsLength := len(t.Events)
		eventsOffsets := make([]flatbuffers.UOffsetT, eventsLength)
		for j := 0; j < eventsLength; j++ {
			eventsOffsets[j] = t.Events[j].Pack(builder)
		}
		WatchResourceResponseStartEventsVector(builder, eventsLength)
		for j := eventsLength - 1; j >= 0; j-- {
			builder.PrependUOffsetT(eventsOffsets[j])
		}
		eventsOffset = builder.EndVector(eventsLength)
	}
	WatchResourceResponseStart(builder)
	WatchResourceResponseAddStatus(builder, statusOffset)
	WatchResourceResponseAddThrottleTimeMs(builder, t.ThrottleTimeMs)
	WatchResourceResponseAddEvents(builder, eventsOffset)
	WatchResourceResponseAddResourceVersion(builder, t.ResourceVersion)
	return WatchResourceResponseEnd(builder)
}

func (rcv *WatchResourceResponse) UnPackTo(t *WatchResourceResponseT) {
	t.Status = rcv.Status(nil).UnPack()
	t.ThrottleTimeMs = rcv.ThrottleTimeMs()
	eventsLength := rcv.EventsLength()
	t.Events = make([]*ResourceEventT, eventsLength)
	for j := 0; j < eventsLength; j++ {
		x := ResourceEvent{}
		rcv.Events(&x, j)
		t.Events[j] = x.UnPack()
	}
	t.ResourceVersion = rcv.ResourceVersion()
}

func (rcv *WatchResourceResponse) UnPack() *WatchResourceResponseT {
	if rcv == nil { return nil }
	t := &WatchResourceResponseT{}
	rcv.UnPackTo(t)
	return t
}

type WatchResourceResponse struct {
	_tab flatbuffers.Table
}

func GetRootAsWatchResourceResponse(buf []byte, offset flatbuffers.UOffsetT) *WatchResourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WatchResourceResponse{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsWatchResourceResponse(buf []byte, offset flatbuffers.UOffsetT) *WatchResourceResponse {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WatchResourceResponse{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *WatchResourceResponse) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WatchResourceResponse) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WatchResourceResponse) Status(obj *Status) *Status {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Status)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func (rcv *WatchResourceResponse) ThrottleTimeMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WatchResourceResponse) MutateThrottleTimeMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(6, n)
}

func (rcv *WatchResourceResponse) Events(obj *ResourceEvent, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WatchResourceResponse) EventsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WatchResourceResponse) ResourceVersion() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WatchResourceResponse) MutateResourceVersion(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func WatchResourceResponseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func WatchResourceResponseAddStatus(builder *flatbuffers.Builder, status flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(status), 0)
}
func WatchResourceResponseAddThrottleTimeMs(builder *flatbuffers.Builder, throttleTimeMs int32) {
	builder.PrependInt32Slot(1, throttleTimeMs, 0)
}
func WatchResourceResponseAddEvents(builder *flatbuffers.Builder, events flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(events), 0)
}
func WatchResourceResponseStartEventsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WatchResourceResponseAddResourceVersion(builder *flatbuffers.Builder, resourceVersion int64) {
	builder.PrependInt64Slot(3, resourceVersion, 0)
}
func WatchResourceResponseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DeleteRangeRequestT struct {
	TimeoutMs int32 `json:"timeout_ms"`
	Key []byte `json:"key"`
	RangeEnd []byte `json:"range_end"`
}

func (t *DeleteRangeRequestT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != nil {
		keyOffset = builder.CreateByteString(t.Key)
	}
	rangeEndOffset := flatbuffers.UOffsetT(0)
	if t.RangeEnd != nil {
		rangeEndOffset = builder.CreateByteString(t.RangeEnd)
	}
	DeleteRangeRequestStart(builder)
	DeleteRangeRequestAddTimeoutMs(builder, t.TimeoutMs)
	DeleteRangeRequestAddKey(builder, keyOffset)
	DeleteRangeRequestAddRangeEnd(builder, rangeEndOffset)
	return DeleteRangeRequestEnd(builder)
}

func (rcv *DeleteRangeRequest) UnPackTo(t *DeleteRangeRequestT) {
	t.TimeoutMs = rcv.TimeoutMs()
	t.Key = rcv.KeyBytes()
	t.RangeEnd = rcv.RangeEndBytes()
}

func (rcv *DeleteRangeRequest) UnPack() *DeleteRangeRequestT {
	if rcv == nil { return nil }
	t := &DeleteRangeRequestT{}
	rcv.UnPackTo(t)
	return t
}

type DeleteRangeRequest struct {
	_tab flatbuffers.Table
}

func GetRootAsDeleteRangeRequest(buf []byte, offset flatbuffers.UOffsetT) *DeleteRangeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DeleteRangeRequest{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDeleteRangeRequest(buf []byte, offset flatbuffers.UOffsetT) *DeleteRangeRequest {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DeleteRangeRequest{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DeleteRangeRequest) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DeleteRangeRequest) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DeleteRangeRequest) TimeoutMs() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *DeleteRangeRequest) MutateTimeoutMs(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *DeleteRangeRequest) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DeleteRangeRequest) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DeleteRangeRequest) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeleteRangeRequest) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *DeleteRangeRequest) RangeEnd(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *DeleteRangeRequest) RangeEndLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *DeleteRangeRequest) RangeEndBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *DeleteRangeRequest) MutateRangeEnd(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func DeleteRangeRequestStart(builder *flatbuffers.Builder) {
	builder.StartObject(3)
}
func DeleteRangeRequestAddTimeoutMs(builder *flatbuffers.Builder, timeoutMs int32) {
	builder.PrependInt32Slot(0, timeoutMs, 0)
}
func DeleteRangeRequestAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(key), 0)
}
func DeleteRangeRequestStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DeleteRangeRequestAddRangeEnd(builder *flatbuffers.Builder, rangeEnd flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(rangeEnd), 0)
}
func DeleteRangeRequestStartRangeEndVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func DeleteRangeRequestEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

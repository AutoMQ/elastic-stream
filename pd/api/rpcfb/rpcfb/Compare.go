// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type CompareT struct {
	Result CompareResult `json:"result"`
	Target CompareTarget `json:"target"`
	Key []byte `json:"key"`
	TargetUnion *CompareTargetUnionT `json:"target_union"`
}

func (t *CompareT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != nil {
		keyOffset = builder.CreateByteString(t.Key)
	}
	targetUnionOffset := t.TargetUnion.Pack(builder)
	
	CompareStart(builder)
	CompareAddResult(builder, t.Result)
	CompareAddTarget(builder, t.Target)
	CompareAddKey(builder, keyOffset)
	if t.TargetUnion != nil {
		CompareAddTargetUnionType(builder, t.TargetUnion.Type)
	}
	CompareAddTargetUnion(builder, targetUnionOffset)
	return CompareEnd(builder)
}

func (rcv *Compare) UnPackTo(t *CompareT) {
	t.Result = rcv.Result()
	t.Target = rcv.Target()
	t.Key = rcv.KeyBytes()
	targetUnionTable := flatbuffers.Table{}
	if rcv.TargetUnion(&targetUnionTable) {
		t.TargetUnion = rcv.TargetUnionType().UnPack(targetUnionTable)
	}
}

func (rcv *Compare) UnPack() *CompareT {
	if rcv == nil { return nil }
	t := &CompareT{}
	rcv.UnPackTo(t)
	return t
}

type Compare struct {
	_tab flatbuffers.Table
}

func GetRootAsCompare(buf []byte, offset flatbuffers.UOffsetT) *Compare {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Compare{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsCompare(buf []byte, offset flatbuffers.UOffsetT) *Compare {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Compare{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Compare) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Compare) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Compare) Result() CompareResult {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return CompareResult(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Compare) MutateResult(n CompareResult) bool {
	return rcv._tab.MutateByteSlot(4, byte(n))
}

func (rcv *Compare) Target() CompareTarget {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return CompareTarget(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Compare) MutateTarget(n CompareTarget) bool {
	return rcv._tab.MutateByteSlot(6, byte(n))
}

func (rcv *Compare) Key(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *Compare) KeyLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *Compare) KeyBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Compare) MutateKey(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func (rcv *Compare) TargetUnionType() CompareTargetUnion {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return CompareTargetUnion(rcv._tab.GetByte(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *Compare) MutateTargetUnionType(n CompareTargetUnion) bool {
	return rcv._tab.MutateByteSlot(10, byte(n))
}

func (rcv *Compare) TargetUnion(obj *flatbuffers.Table) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		rcv._tab.Union(obj, o)
		return true
	}
	return false
}

func CompareStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func CompareAddResult(builder *flatbuffers.Builder, result CompareResult) {
	builder.PrependByteSlot(0, byte(result), 0)
}
func CompareAddTarget(builder *flatbuffers.Builder, target CompareTarget) {
	builder.PrependByteSlot(1, byte(target), 0)
}
func CompareAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(key), 0)
}
func CompareStartKeyVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func CompareAddTargetUnionType(builder *flatbuffers.Builder, targetUnionType CompareTargetUnion) {
	builder.PrependByteSlot(3, byte(targetUnionType), 0)
}
func CompareAddTargetUnion(builder *flatbuffers.Builder, targetUnion flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(targetUnion), 0)
}
func CompareEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

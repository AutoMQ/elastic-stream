// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ObjectMetadataT struct {
	Key string `json:"key"`
	StartOffset int64 `json:"start_offset"`
	EndOffset int64 `json:"end_offset"`
	SparseIndex []byte `json:"sparse_index"`
}

func (t *ObjectMetadataT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	keyOffset := flatbuffers.UOffsetT(0)
	if t.Key != "" {
		keyOffset = builder.CreateString(t.Key)
	}
	sparseIndexOffset := flatbuffers.UOffsetT(0)
	if t.SparseIndex != nil {
		sparseIndexOffset = builder.CreateByteString(t.SparseIndex)
	}
	ObjectMetadataStart(builder)
	ObjectMetadataAddKey(builder, keyOffset)
	ObjectMetadataAddStartOffset(builder, t.StartOffset)
	ObjectMetadataAddEndOffset(builder, t.EndOffset)
	ObjectMetadataAddSparseIndex(builder, sparseIndexOffset)
	return ObjectMetadataEnd(builder)
}

func (rcv *ObjectMetadata) UnPackTo(t *ObjectMetadataT) {
	t.Key = string(rcv.Key())
	t.StartOffset = rcv.StartOffset()
	t.EndOffset = rcv.EndOffset()
	t.SparseIndex = rcv.SparseIndexBytes()
}

func (rcv *ObjectMetadata) UnPack() *ObjectMetadataT {
	if rcv == nil { return nil }
	t := &ObjectMetadataT{}
	rcv.UnPackTo(t)
	return t
}

type ObjectMetadata struct {
	_tab flatbuffers.Table
}

func GetRootAsObjectMetadata(buf []byte, offset flatbuffers.UOffsetT) *ObjectMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ObjectMetadata{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsObjectMetadata(buf []byte, offset flatbuffers.UOffsetT) *ObjectMetadata {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ObjectMetadata{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ObjectMetadata) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ObjectMetadata) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ObjectMetadata) Key() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ObjectMetadata) StartOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *ObjectMetadata) MutateStartOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(6, n)
}

func (rcv *ObjectMetadata) EndOffset() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *ObjectMetadata) MutateEndOffset(n int64) bool {
	return rcv._tab.MutateInt64Slot(8, n)
}

func (rcv *ObjectMetadata) SparseIndex(j int) byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.GetByte(a + flatbuffers.UOffsetT(j*1))
	}
	return 0
}

func (rcv *ObjectMetadata) SparseIndexLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *ObjectMetadata) SparseIndexBytes() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *ObjectMetadata) MutateSparseIndex(j int, n byte) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.MutateByte(a+flatbuffers.UOffsetT(j*1), n)
	}
	return false
}

func ObjectMetadataStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func ObjectMetadataAddKey(builder *flatbuffers.Builder, key flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(key), 0)
}
func ObjectMetadataAddStartOffset(builder *flatbuffers.Builder, startOffset int64) {
	builder.PrependInt64Slot(1, startOffset, -1)
}
func ObjectMetadataAddEndOffset(builder *flatbuffers.Builder, endOffset int64) {
	builder.PrependInt64Slot(2, endOffset, -1)
}
func ObjectMetadataAddSparseIndex(builder *flatbuffers.Builder, sparseIndex flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(sparseIndex), 0)
}
func ObjectMetadataStartSparseIndexVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(1, numElems, 1)
}
func ObjectMetadataEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type ResourceEventT struct {
	Type EventType `json:"type"`
	Resource *ResourceT `json:"resource"`
}

func (t *ResourceEventT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	resourceOffset := t.Resource.Pack(builder)
	ResourceEventStart(builder)
	ResourceEventAddType(builder, t.Type)
	ResourceEventAddResource(builder, resourceOffset)
	return ResourceEventEnd(builder)
}

func (rcv *ResourceEvent) UnPackTo(t *ResourceEventT) {
	t.Type = rcv.Type()
	t.Resource = rcv.Resource(nil).UnPack()
}

func (rcv *ResourceEvent) UnPack() *ResourceEventT {
	if rcv == nil { return nil }
	t := &ResourceEventT{}
	rcv.UnPackTo(t)
	return t
}

type ResourceEvent struct {
	_tab flatbuffers.Table
}

func GetRootAsResourceEvent(buf []byte, offset flatbuffers.UOffsetT) *ResourceEvent {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &ResourceEvent{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsResourceEvent(buf []byte, offset flatbuffers.UOffsetT) *ResourceEvent {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &ResourceEvent{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *ResourceEvent) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *ResourceEvent) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *ResourceEvent) Type() EventType {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return EventType(rcv._tab.GetInt8(o + rcv._tab.Pos))
	}
	return 0
}

func (rcv *ResourceEvent) MutateType(n EventType) bool {
	return rcv._tab.MutateInt8Slot(4, int8(n))
}

func (rcv *ResourceEvent) Resource(obj *Resource) *Resource {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Resource)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

func ResourceEventStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func ResourceEventAddType(builder *flatbuffers.Builder, type_ EventType) {
	builder.PrependInt8Slot(0, int8(type_), 0)
}
func ResourceEventAddResource(builder *flatbuffers.Builder, resource flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(resource), 0)
}
func ResourceEventEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

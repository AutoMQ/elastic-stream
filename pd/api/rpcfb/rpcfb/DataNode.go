// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DataNodeT struct {
	NodeId int32 `json:"node_id"`
	AdvertiseAddr string `json:"advertise_addr"`
}

func (t *DataNodeT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	advertiseAddrOffset := flatbuffers.UOffsetT(0)
	if t.AdvertiseAddr != "" {
		advertiseAddrOffset = builder.CreateString(t.AdvertiseAddr)
	}
	DataNodeStart(builder)
	DataNodeAddNodeId(builder, t.NodeId)
	DataNodeAddAdvertiseAddr(builder, advertiseAddrOffset)
	return DataNodeEnd(builder)
}

func (rcv *DataNode) UnPackTo(t *DataNodeT) {
	t.NodeId = rcv.NodeId()
	t.AdvertiseAddr = string(rcv.AdvertiseAddr())
}

func (rcv *DataNode) UnPack() *DataNodeT {
	if rcv == nil { return nil }
	t := &DataNodeT{}
	rcv.UnPackTo(t)
	return t
}

type DataNode struct {
	_tab flatbuffers.Table
}

func GetRootAsDataNode(buf []byte, offset flatbuffers.UOffsetT) *DataNode {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &DataNode{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDataNode(buf []byte, offset flatbuffers.UOffsetT) *DataNode {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &DataNode{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *DataNode) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *DataNode) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *DataNode) NodeId() int32 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt32(o + rcv._tab.Pos)
	}
	return -1
}

func (rcv *DataNode) MutateNodeId(n int32) bool {
	return rcv._tab.MutateInt32Slot(4, n)
}

func (rcv *DataNode) AdvertiseAddr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DataNodeStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DataNodeAddNodeId(builder *flatbuffers.Builder, nodeId int32) {
	builder.PrependInt32Slot(0, nodeId, -1)
}
func DataNodeAddAdvertiseAddr(builder *flatbuffers.Builder, advertiseAddr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(advertiseAddr), 0)
}
func DataNodeEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}

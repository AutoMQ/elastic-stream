// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package rpcfb

import (
	"strconv"
	flatbuffers "github.com/google/flatbuffers/go"
)

type CompareTargetUnion byte

const (
	CompareTargetUnionNONE               CompareTargetUnion = 0
	CompareTargetUnionCompareTargetValue CompareTargetUnion = 1
)

var EnumNamesCompareTargetUnion = map[CompareTargetUnion]string{
	CompareTargetUnionNONE:               "NONE",
	CompareTargetUnionCompareTargetValue: "CompareTargetValue",
}

var EnumValuesCompareTargetUnion = map[string]CompareTargetUnion{
	"NONE":               CompareTargetUnionNONE,
	"CompareTargetValue": CompareTargetUnionCompareTargetValue,
}

func (v CompareTargetUnion) String() string {
	if s, ok := EnumNamesCompareTargetUnion[v]; ok {
		return s
	}
	return "CompareTargetUnion(" + strconv.FormatInt(int64(v), 10) + ")"
}

type CompareTargetUnionT struct {
	Type CompareTargetUnion
	Value interface{}
}

func (t *CompareTargetUnionT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil {
		return 0
	}
	switch t.Type {
	case CompareTargetUnionCompareTargetValue:
		return t.Value.(*CompareTargetValueT).Pack(builder)
	}
	return 0
}

func (rcv CompareTargetUnion) UnPack(table flatbuffers.Table) *CompareTargetUnionT {
	switch rcv {
	case CompareTargetUnionCompareTargetValue:
		var x CompareTargetValue
		x.Init(table.Bytes, table.Pos)
		return &CompareTargetUnionT{ Type: CompareTargetUnionCompareTargetValue, Value: x.UnPack() }
	}
	return nil
}
